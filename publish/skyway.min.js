/*! SkywayJS - v0.0.1 - 2014-06-17 */
if(RTCPeerConnection=null,getUserMedia=null,attachMediaStream=null,reattachMediaStream=null,isPluginInstalled=null,defineWebRTCInterface=null,pluginNeededButNotInstalledCb=null,webrtcDetectedBrowser={},RTCDataChannels={},temPluginInfo={pluginId:"plugin0",type:"application/x-temwebrtcplugin",onload:"TemInitPlugin0"},TemPageId=Math.random().toString(36).slice(2),getBrowserVersion=function(){var tem,agent={},na=navigator,ua=na.userAgent,M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i)||[];if(agent.os=navigator.platform,agent.isSCTPDCSupported=agent.mozWebRTC||"Chrome"===agent.browser&&agent.version>=25,agent.isRTPDCSupported="Chrome"===agent.browser&&agent.version>=31,agent.isSCTPDCSupported||agent.isRTPDCSupported||(agent.isPluginSupported=!0),na.mozGetUserMedia?agent.mozWebRTC=!0:na.webkitGetUserMedia?agent.webkitWebRTC=!0:ua.indexOf("Safari")&&("undefined"!=typeof InstallTrigger?agent.browser="Firefox":document.documentMode?agent.browser="IE":Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")>0?agent.browser="Safari":window.opera||na.userAgent.indexOf(" OPR/")>=0?agent.browser="Opera":window.chrome&&(agent.browser="Chrome"),agent.pluginWebRTC=!0),/trident/i.test(M[1])?(tem=/\brv[ :]+(\d+)/g.exec(ua)||[],agent.browser="IE",agent.version=parseInt(tem[1]||"0",10)):"Chrome"===M[1]&&(tem=ua.match(/\bOPR\/(\d+)/),null!==tem&&(agent.browser="Opera",agent.version=parseInt(tem[1],10))),agent.browser||(agent.browser=M[1]),!agent.version)try{M=M[2]?[M[1],M[2]]:[navigator.appName,navigator.appVersion,"-?"],null!==(tem=ua.match(/version\/(\d+)/i))&&M.splice(1,1,tem[1]),agent.version=parseInt(M[1],10)}catch(err){agent.version=0}return agent},webrtcDetectedBrowser=getBrowserVersion(),TemRTCPlugin=null,TemPrivateWebRTCReadyCb=function(){arguments.callee.StaticWasInit=arguments.callee.StaticWasInit||1,1===arguments.callee.StaticWasInit&&"function"==typeof WebRTCReadyCb&&WebRTCReadyCb(),arguments.callee.StaticWasInit++},TemInitPlugin0=function(){TemRTCPlugin.setPluginId(TemPageId,temPluginInfo.pluginId),TemRTCPlugin.setLogFunction(console),TemPrivateWebRTCReadyCb()},maybeFixConfiguration=function(pcConfig){if(null!==pcConfig)for(var i=0;i<pcConfig.iceServers.length;i++)pcConfig.iceServers[i].hasOwnProperty("urls")&&(pcConfig.iceServers[i].url=pcConfig.iceServers[i].urls,delete pcConfig.iceServers[i].urls)},webrtcDetectedBrowser.mozWebRTC)RTCPeerConnection=function(pcConfig,pcConstraints){return maybeFixConfiguration(pcConfig),new mozRTCPeerConnection(pcConfig,pcConstraints)},RTCSessionDescription=mozRTCSessionDescription,RTCIceCandidate=mozRTCIceCandidate,getUserMedia=navigator.mozGetUserMedia.bind(navigator),navigator.getUserMedia=getUserMedia,createIceServer=function(url,username,password){var iceServer=null,url_parts=url.split(":");if(0===url_parts[0].indexOf("stun"))iceServer={url:url};else if(0===url_parts[0].indexOf("turn"))if(webrtcDetectedBrowser.version<27){var turn_url_parts=url.split("?");(1===turn_url_parts.length||0===turn_url_parts[1].indexOf("transport=udp"))&&(iceServer={url:turn_url_parts[0],credential:password,username:username})}else iceServer={url:url,credential:password,username:username};return iceServer},createIceServers=function(urls,username,password){var iceServers=[];for(i=0;i<urls.length;i++){var iceServer=createIceServer(urls[i],username,password);null!==iceServer&&iceServers.push(iceServer)}return iceServers},attachMediaStream=function(element,stream){return console.log("Attaching media stream"),element.mozSrcObject=stream,element.play(),element},reattachMediaStream=function(to,from){return console.log("Reattaching media stream"),to.mozSrcObject=from.mozSrcObject,to.play(),to},MediaStream.prototype.getVideoTracks||(MediaStream.prototype.getVideoTracks=function(){return[]}),MediaStream.prototype.getAudioTracks||(MediaStream.prototype.getAudioTracks=function(){return[]}),TemPrivateWebRTCReadyCb();else if(webrtcDetectedBrowser.webkitWebRTC)createIceServer=function(url,username,password){var iceServer=null,url_parts=url.split(":");return 0===url_parts[0].indexOf("stun")?iceServer={url:url}:0===url_parts[0].indexOf("turn")&&(iceServer={url:url,credential:password,username:username}),iceServer},createIceServers=function(urls,username,password){var iceServers=[];if(webrtcDetectedBrowser.version>=34)iceServers={urls:urls,credential:password,username:username};else for(i=0;i<urls.length;i++){var iceServer=createIceServer(urls[i],username,password);null!==iceServer&&iceServers.push(iceServer)}return iceServers},RTCPeerConnection=function(pcConfig,pcConstraints){return webrtcDetectedBrowser.version<34&&maybeFixConfiguration(pcConfig),new webkitRTCPeerConnection(pcConfig,pcConstraints)},getUserMedia=navigator.webkitGetUserMedia.bind(navigator),navigator.getUserMedia=getUserMedia,attachMediaStream=function(element,stream){return"undefined"!=typeof element.srcObject?element.srcObject=stream:"undefined"!=typeof element.mozSrcObject?element.mozSrcObject=stream:"undefined"!=typeof element.src?element.src=URL.createObjectURL(stream):console.log("Error attaching stream to element."),element},reattachMediaStream=function(to,from){return to.src=from.src,to},TemPrivateWebRTCReadyCb();else if(webrtcDetectedBrowser.pluginWebRTC){var isFirefox="Firefox"===webrtcDetectedBrowser.browser,isSafari="Safari"===webrtcDetectedBrowser.browser,isChrome="Chrome"===webrtcDetectedBrowser.browser,isIE="IE"===webrtcDetectedBrowser.browser;TemRTCPlugin=document.createElement("object"),TemRTCPlugin.id=temPluginInfo.pluginId,TemRTCPlugin.style.visibility="hidden",TemRTCPlugin.type=temPluginInfo.type,TemRTCPlugin.innerHTML='<param name="onload" value="'+temPluginInfo.onload+'"><param name="pluginId" value="'+temPluginInfo.pluginId+'"><param name="pageId" value="'+TemPageId+'">',document.getElementsByTagName("body")[0].appendChild(TemRTCPlugin),TemRTCPlugin.onreadystatechange=function(state){console.log("Plugin: Ready State : "+state),4===state&&console.log("Plugin has been loaded")},isPluginInstalled=function(comName,plugName,installedCb,notInstalledCb){if(isChrome||isSafari||isFirefox){for(var pluginArray=navigator.plugins,i=0;i<pluginArray.length;i++)if(pluginArray[i].name.indexOf(plugName)>=0)return void installedCb();notInstalledCb()}else{if(!isIE)return;try{new ActiveXObject(comName+"."+plugName)}catch(e){return void notInstalledCb()}installedCb()}},defineWebRTCInterface=function(){isDefined=function(variable){return null!==variable&&void 0!==variable},createIceServer=function(url,username,password){var iceServer=null,url_parts=url.split(":");return 0===url_parts[0].indexOf("stun")?iceServer={url:url,hasCredentials:!1}:0===url_parts[0].indexOf("turn")&&(iceServer={url:url,hasCredentials:!0,credential:password,username:username}),iceServer},createIceServers=function(urls,username,password){for(var iceServers=[],i=0;i<urls.length;++i)iceServers.push(createIceServer(urls[i],username,password));return iceServers},RTCSessionDescription=function(info){return TemRTCPlugin.ConstructSessionDescription(info.type,info.sdp)},RTCPeerConnection=function(servers,constraints){var iceServers=null;if(servers){iceServers=servers.iceServers;for(var i=0;i<iceServers.length;i++)iceServers[i].urls&&!iceServers[i].url&&(iceServers[i].url=iceServers[i].urls),iceServers[i].hasCredentials=isDefined(iceServers[i].username)&&isDefined(iceServers[i].credential)}var mandatory=constraints&&constraints.mandatory?constraints.mandatory:null,optional=constraints&&constraints.optional?constraints.optional:null;return TemRTCPlugin.PeerConnection(TemPageId,iceServers,mandatory,optional)},MediaStreamTrack={},MediaStreamTrack.getSources=function(callback){TemRTCPlugin.GetSources(callback)},getUserMedia=function(constraints,successCallback,failureCallback){constraints.audio||(constraints.audio=!1),TemRTCPlugin.getUserMedia(constraints,successCallback,failureCallback)},navigator.getUserMedia=getUserMedia,attachMediaStream=function(element,stream){if(stream.enableSoundTracks(!0),"audio"!==element.nodeName.toLowerCase()){var elementId=0===element.id.length?Math.random().toString(36).slice(2):element.id;if(element.isTemWebRTCPlugin&&element.isTemWebRTCPlugin()){for(var children=element.children,i=0;i!==children.length;++i)if("streamId"===children[i].name){children[i].value=stream.id;break}element.setStreamId(stream.id)}else{var frag=document.createDocumentFragment(),temp=document.createElement("div"),classHTML=element.className?'class="'+element.className+'" ':"";for(temp.innerHTML='<object id="'+elementId+'" '+classHTML+'type="application/x-temwebrtcplugin"><param name="pluginId" value="'+elementId+'" /> <param name="pageId" value="'+TemPageId+'" /> <param name="streamId" value="'+stream.id+'" /> </object>';temp.firstChild;)frag.appendChild(temp.firstChild);var rectObject=element.getBoundingClientRect();element.parentNode.insertBefore(frag,element),frag=document.getElementById(elementId),frag.width=rectObject.width+"px",frag.height=rectObject.height+"px",element.parentNode.removeChild(element)}var newElement=document.getElementById(elementId);return newElement.onclick=element.onclick?element.onclick:function(){},newElement._TemOnClick=function(id){var arg={srcElement:document.getElementById(id)};newElement.onclick(arg)},newElement}return element},reattachMediaStream=function(to,from){for(var stream=null,children=from.children,i=0;i!==children.length;++i)if("streamId"===children[i].name){stream=TemRTCPlugin.getStreamWithId(TemPageId,children[i].value);break}return null!==stream?attachMediaStream(to,stream):void alert("Could not find the stream associated with this element")},RTCIceCandidate=function(candidate){return candidate.sdpMid||(candidate.sdpMid=""),TemRTCPlugin.ConstructIceCandidate(candidate.sdpMid,candidate.sdpMLineIndex,candidate.candidate)}},pluginNeededButNotInstalledCb=function(){alert("Your browser is not webrtc ready and Temasys plugin is not installed")},isPluginInstalled("Tem","TemWebRTCPlugin",defineWebRTCInterface,pluginNeededButNotInstalledCb)}else console.log("Browser does not appear to be WebRTC-capable");(function(){function Skyway(){return this instanceof Skyway?(this.VERSION="0.0.1",this._path=null,this._key=null,this._socket=null,this._socketVersion=null,this._user=null,this._room=null,this._peerConnections=[],this._browser=null,this._readyState=0,this._channel_open=!1,this._in_room=!1,this._uploadDataTransfers={},this._downloadDataTransfers={},this._dataTransfersTimeout={},this._chunkFileSize=49152,this._parseInfo=function(info,self){console.log(info),console.log(JSON.parse(info.pc_constraints)),console.log(JSON.parse(info.offer_constraints)),self._key=info.cid,self._user={id:info.username,token:info.userCred,timeStamp:info.timeStamp,displayName:info.displayName,apiOwner:info.apiOwner,streams:[]},self._room={id:info.room_key,token:info.roomCred,start:info.start,len:info.len,signalingServer:{ip:info.ipSigserver,port:info.portSigserver},pcHelper:{pcConstraints:JSON.parse(info.pc_constraints),pcConfig:null,offerConstraints:JSON.parse(info.offer_constraints),sdpConstraints:{mandatory:{OfferToReceiveAudio:!0,OfferToReceiveVideo:!0}}}};var socketScript=document.createElement("script");socketScript.src="http://"+info.ipSigserver+":"+info.portSigserver+"/socket.io/socket.io.js",socketScript.onreadystatechange=function(){console.log("API - Socket IO onReadyStateChange"),self._readyState=2,self._trigger("readyStateChange",2)},socketScript.onload=function(){console.log("API - Socket IO Loaded"),self._readyState=2,self._trigger("readyStateChange",2)},socketScript.onerror=function(){console.error("API - Socket IO loading error")},document.getElementsByTagName("head")[0].appendChild(socketScript),console.log("API - Parsed infos from webserver. Ready.")},void(this._init=function(self){if(!window.XMLHttpRequest)return void console.log("XHR - XMLHttpRequest not supported");if(!window.RTCPeerConnection)return void console.log("RTC - WebRTC not supported.");if(window.io||console.log("API - Socket.io is not loaded."),!this._path)return void console.log("API - No connection info. Call init() first.");self._readyState=1,self._trigger("readyStateChange",1);var xhr=new window.XMLHttpRequest;xhr.onreadystatechange=function(){if(this.readyState===this.DONE){if(200!==this.status)return console.log("XHR - ERROR "+this.status,!1),self._readyState=0,void self._trigger("readyStateChange",0);console.log("API - Got infos from webserver."),self._parseInfo(JSON.parse(this.response),self)}},xhr.open("GET",self._path,!0),console.log("API - Fetching infos from webserver"),xhr.send(),console.log("API - Waiting for webserver to provide infos.")})):new Skyway}this.Skyway=Skyway,Skyway.prototype.on=function(eventName,callback){"function"==typeof callback&&(this._events[eventName]=this._events[eventName]||[],this._events[eventName].push(callback))},Skyway.prototype.off=function(eventName,callback){if(void 0===callback)return void(this._events[eventName]=[]);for(var arr=this._events[eventName],l=arr.length,i=0;l>i;i++)if(arr[i]===callback){arr.splice(i,1);break}},Skyway.prototype._trigger=function(eventName){var args=Array.prototype.slice.call(arguments),arr=this._events[eventName];args.shift();for(var e in arr)if(arr[e].apply(this,args)===!1)break},Skyway.prototype.init=function(server,apiKey,room,startDateTime,length,cred){var socketCheck={};if(window.location.search)for(var parts=window.location.search.substring(1).split("&"),i=0;i<parts.length;i++){var nv=parts[i].split("=");nv[0]&&(socketCheck[nv[0]]=nv[1]||!0)}this._readyState=0,this._trigger("readyStateChange",0),this._key=apiKey,this._path=server+"api/"+apiKey+"/"+room+"/"+startDateTime+"/"+length+"?&cred="+cred,console.log("API - Initializing Credentials"),console.dir(cred),console.log("API - Socket Version: "+socketCheck.io),socketCheck.io&&(this._socketVersion=socketCheck.io,this._path+="&io="+socketCheck.io),console.log("API - Path: "+this._path),this._init(this)},Skyway.prototype.setUser=function(user){this._user=user},Skyway.prototype._events={channelOpen:[],channelClose:[],channelMessage:[],channelError:[],joinedRoom:[],readyStateChange:[],handshakeProgress:[],candidateGenerationState:[],peerConnectionState:[],iceConnectionState:[],mediaAccessError:[],mediaAccessSuccess:[],chatMessage:[],peerJoined:[],peerLeft:[],presenceChanged:[],roomLock:[],addPeerStream:[],removePeerStream:[],peerVideoMute:[],peerAudioMute:[],addContact:[],removeContact:[],invitePeer:[]},Skyway.prototype.sendChatMsg=function(chatMsg,targetPeerID){var msg_json={cid:this._key,data:chatMsg,mid:this._user.id,nick:this._user.displayName,rid:this._room.id,type:"chat"};targetPeerID&&(msg_json.target=targetPeerID),this._sendMessage(msg_json),this._trigger("chatMessage",chatMsg,this._user.displayName,!!targetPeerID)},Skyway.prototype.getDefaultStream=function(){var self=this;try{window.getUserMedia({audio:!0,video:!0},function(s){self._onUserMediaSuccess(s,self)},function(e){self._onUserMediaError(e,self)}),console.log("API - Requested: A/V.")}catch(e){this._onUserMediaError(e,self)}},Skyway.prototype._onUserMediaSuccess=function(stream,t){console.log("API - User has granted access to local media."),t._trigger("mediaAccessSuccess",stream),t._user.streams.push(stream)},Skyway.prototype._onUserMediaError=function(e,t){console.log("API - getUserMedia failed with exception type: "+e.name),e.message&&console.log("API - getUserMedia failed with exception: "+e.message),e.constraintName&&console.log("API - getUserMedia failed because of the following constraint: "+e.constraintName),t._trigger("mediaAccessError",e.name)},Skyway.prototype._processSigMsg=function(message){var msg=JSON.parse(message);if("group"===msg.type){console.log("API - Bundle of "+msg.lists.length+" messages.");for(var i=0;i<msg.lists.length;i++)this._processSingleMsg(msg.lists[i])}else this._processSingleMsg(msg)},Skyway.prototype._processSingleMsg=function(msg){this._trigger("channelMessage");var origin=msg.mid;if(origin&&origin!==this._user.id||(origin="Server"),console.log("API - ["+origin+"] Incoming message: "+msg.type),msg.mid===this._user.id&&"redirect"!==msg.type&&"inRoom"!==msg.type&&"chat"!==msg.type)return void console.log("API - Ignoring message: "+msg.type+".");switch(msg.type){case"inRoom":this._inRoomHandler(msg);break;case"enter":this._enterHandler(msg);break;case"welcome":this._welcomeHandler(msg);break;case"offer":this._offerHandler(msg);break;case"answer":this._answerHandler(msg);break;case"candidate":this._candidateHandler(msg);break;case"bye":this._byeHandler(msg);break;case"chat":this._chatHandler(msg);break;case"redirect":this._redirectHandler(msg);break;case"update_guest_name":break;case"error":break;case"invite":break;case"video_mute_event":break;case"roomLockEvent":break;default:console.log("API - ["+msg.mid+"] Unsupported message type received: "+msg.type)}},Skyway.prototype._chatHandler=function(msg){this._trigger("chatMessage",msg.data,msg.id===this._user.id?"Me, myself and I":msg.nick,msg.target?!0:!1)},Skyway.prototype._redirectHandler=function(msg){console.log("API - [Server] You are being redirected: "+msg.info),"warning"!==msg.action&&("reject"===msg.action?location.href=msg.url:"close"===msg.action&&(location.href=msg.url))},Skyway.prototype._byeHandler=function(msg){var targetMid=msg.mid;console.log("API - ["+targetMid+"] received 'bye'."),this._removePeer(targetMid)},Skyway.prototype._removePeer=function(peerID){this._trigger("peerLeft",peerID),this._peerConnections[peerID]&&this._peerConnections[peerID].close(),delete this._peerConnections[peerID]},Skyway.prototype._inRoomHandler=function(msg){console.log("API - We're in the room! Chat functionalities are now available."),console.log("API - We've been given the following PC Constraint by the sig server: "),console.dir(msg.pc_config);var temp_config=msg.pc_config;if(window.webrtcDetectedBrowser.mozWebRTC){for(var newIceServers=[{url:"stun:stun.services.mozilla.com"}],i=0;i<msg.pc_config.iceServers.length;i++){var iceServer=msg.pc_config.iceServers[i],iceServerType=iceServer.url.split(":")[0];if("stun"===iceServerType){if(iceServer.url.indexOf("google"))continue;iceServer.url=[iceServer.url],newIceServers.push(iceServer)}else{var newIceServer={};newIceServer.credential=iceServer.credential,newIceServer.url=iceServer.url.split(":")[0],newIceServer.username=iceServer.url.split(":")[1].split("@")[0],newIceServer.url+=":"+iceServer.url.split(":")[1].split("@")[1],newIceServers.push(newIceServer)}}temp_config.iceServers=newIceServers}console.dir(temp_config),this._room.pcHelper.pcConfig=temp_config,this._in_room=!0,this._trigger("joinedRoom",this._room.id),console.log("API - Sending enter."),this._trigger("handshakeProgress","enter"),this._sendMessage({type:"enter",mid:this._user.id,rid:this._room.id,nick:this._user.displayName})},Skyway.prototype._enterHandler=function(msg){var targetMid=msg.mid;this._trigger("handshakeProgress","enter",targetMid),this._trigger("peerJoined",targetMid),this._peerConnections[targetMid]||(console.log("API - ["+targetMid+"] Sending welcome."),this._trigger("handshakeProgress","welcome",targetMid),this._sendMessage({type:"welcome",mid:this._user.id,target:targetMid,rid:this._room.id,nick:this._user.displayName}))},Skyway.prototype._welcomeHandler=function(msg){var targetMid=msg.mid;this._trigger("handshakeProgress","welcome",targetMid),this._trigger("peerJoined",targetMid),this._peerConnections[targetMid]||this._openPeer(targetMid,!0)},Skyway.prototype._offerHandler=function(msg){var targetMid=msg.mid;this._trigger("handshakeProgress","offer",targetMid),console.log("Test:"),console.log(msg);var offer=new window.RTCSessionDescription(msg);console.log("API - ["+targetMid+"] Received offer:"),console.dir(offer);var pc=this._peerConnections[targetMid];pc||(this._openPeer(targetMid,!1),pc=this._peerConnections[targetMid]),pc.setRemoteDescription(offer),this._doAnswer(targetMid)},Skyway.prototype._doAnswer=function(targetMid){console.log("API - ["+targetMid+"] Creating answer.");var pc=this._peerConnections[targetMid],self=this;pc&&pc.createAnswer(function(answer){console.log("API - ["+targetMid+"] Created  answer."),console.dir(answer),self._setLocalAndSendMessage(targetMid,answer)},function(error){self._onOfferOrAnswerError(targetMid,error,"answer")},self._room.pcHelper.sdpConstraints)},Skyway.prototype._onOfferOrAnswerError=function(targetMid,error,type){console.log("API - ["+targetMid+"] Failed to create an "+type+". Error code was "+JSON.stringify(error))},Skyway.prototype._openPeer=function(targetMid,toOffer){if(console.log("API - ["+targetMid+"] Creating PeerConnection."),this._peerConnections[targetMid]=this._createPeerConnection(targetMid),console.log("API - ["+targetMid+"] Adding local stream."),this._user.streams.length>0)for(var i in this._user.streams)this._user.streams.hasOwnProperty(i)&&this._peerConnections[targetMid].addStream(this._user.streams[i]);else console.log("API - WARNING - No stream to send. You will be only receiving.");toOffer&&(this._createDataChannel(this._user.id,targetMid),this._doCall(targetMid))},Skyway.prototype._onRemoteStreamAdded=function(targetMid,event){console.log("API - ["+targetMid+"] Remote Stream added."),this._trigger("addPeerStream",targetMid,event.stream)},Skyway.prototype._doCall=function(targetMid){var pc=this._peerConnections[targetMid],oc=this._room.pcHelper.offerConstraints;if(window.webrtcDetectedBrowser.webkitWebRTC)for(var prop in oc.mandatory)oc.mandatory.hasOwnProperty(prop)&&-1!==prop.indexOf("Moz")&&delete oc.mandatory[prop];var constraints=oc,sc=this._room.pcHelper.sdpConstraints;for(var name in sc.mandatory)sc.mandatory.hasOwnProperty(name)&&(constraints.mandatory[name]=sc.mandatory[name]);constraints.optional.concat(sc.optional),console.log("API - ["+targetMid+"] Creating offer.");var self=this;pc.createOffer(function(offer){self._setLocalAndSendMessage(targetMid,offer)},function(error){self._onOfferOrAnswerError(targetMid,error,"offer")},constraints)},Skyway.prototype._setLocalAndSendMessage=function(targetMid,sessionDescription){console.log("API - ["+targetMid+"] Created "+sessionDescription.type+"."),console.log(sessionDescription);var pc=this._peerConnections[targetMid];console.log("API - ["+targetMid+"] Setting local Description ("+sessionDescription.type+").");var self=this;pc.setLocalDescription(sessionDescription,function(){console.log("API - ["+targetMid+"] Set. Sending "+sessionDescription.type+"."),self._trigger("handshakeProgress",sessionDescription.type,targetMid),self._sendMessage({type:sessionDescription.type,sdp:sessionDescription.sdp,mid:self._user.id,target:targetMid,rid:self._room.id})},function(){console.log("API - ["+targetMid+"] There was a problem setting the Local Description.")})},Skyway.prototype._createPeerConnection=function(targetMid){var pc;try{pc=new window.RTCPeerConnection(this._room.pcHelper.pcConfig,this._room.pcHelper.pcConstraints),console.log("API - ["+targetMid+"] Created PeerConnection."),console.log("API - ["+targetMid+"] PC config: "),console.dir(this._room.pcHelper.pcConfig),console.log("API - ["+targetMid+"] PC constraints: "+JSON.stringify(this._room.pcHelper.pcConstraints))}catch(e){return console.log("API - ["+targetMid+"] Failed to create PeerConnection: "+e.message),null}var self=this;return pc.ondatachannel=function(event){console.log("DataChannel Opened");var dc=event.channel||event;self._createDataChannel(self._user.id,targetMid,null,dc)},pc.onaddstream=function(event){self._onRemoteStreamAdded(targetMid,event)},pc.onicecandidate=function(event){self._onIceCandidate(targetMid,event)},pc.oniceconnectionstatechange=function(){console.log("API - ["+targetMid+"] ICE connection state changed -> "+pc.iceConnectionState),self._trigger("iceConnectionState",pc.iceConnectionState,targetMid)},pc.onsignalingstatechange=function(){console.log("API - ["+targetMid+"] PC connection state changed -> "+pc.signalingState),self._trigger("peerConnectionState",pc.signalingState,targetMid)},pc.onicegatheringstatechange=function(){console.log("API - ["+targetMid+"] ICE gathering state changed -> "+pc.iceGatheringState),self._trigger("candidateGenerationState",pc.iceGatheringState,targetMid)},pc},Skyway.prototype._onIceCandidate=function(targetMid,event){if(event.candidate){var msgCan=event.candidate.candidate.split(" "),candidateType=msgCan[7];console.log("API - ["+targetMid+"] Created and sending "+candidateType+" candidate."),this._sendMessage({type:"candidate",label:event.candidate.sdpMLineIndex,id:event.candidate.sdpMid,candidate:event.candidate.candidate,mid:this._user.id,target:targetMid,rid:this._room.id})}else console.log("API - ["+targetMid+"] End of gathering."),this._trigger("candidateGenerationState","done",targetMid)},Skyway.prototype._candidateHandler=function(msg){var targetMid=msg.mid,pc=this._peerConnections[targetMid];if(pc){if("connected"===pc.iceConnectionState)return void console.log("API - ["+targetMid+"] Received but not adding Candidate as we are already connected to this peer.");var msgCan=msg.candidate.split(" "),canType=msgCan[7];console.log("API - ["+targetMid+"] Received "+canType+" Candidate.");var index=msg.label,candidate=new window.RTCIceCandidate({sdpMLineIndex:index,candidate:msg.candidate});pc.addIceCandidate(candidate),console.log("API - ["+targetMid+"] Added Candidate.")}else console.log("API - ["+targetMid+"] Received but not adding Candidate as PeerConnection not present.")},Skyway.prototype._answerHandler=function(msg){var targetMid=msg.mid;this._trigger("handshakeProgress","answer",targetMid);var answer=new window.RTCSessionDescription(msg);console.log("API - ["+targetMid+"] Received answer:"),console.dir(answer);var pc=this._peerConnections[targetMid];pc.setRemoteDescription(answer),pc.remotePeerReady=!0},Skyway.prototype._sendMessage=function(message){if(this._channel_open){var msgString=JSON.stringify(message);console.log("API - ["+(message.target?message.target:"server")+"] Outgoing message: "+message.type),this._socket.send(msgString)}},Skyway.prototype._openChannel=function(){var self=this,_openChannelImpl=function(readyState){if(2===readyState){self.off("readyStateChange",_openChannelImpl),console.log("API - Opening channel.");var ip_signaling="ws://"+self._room.signalingServer.ip+":"+self._room.signalingServer.port;console.log("API - Signaling server URL: "+ip_signaling),self._socket=self._socketVersion>=1?io.connect(ip_signaling,{forceNew:!0}):window.io.connect(ip_signaling,{"force new connection":!0}),self._socket=window.io.connect(ip_signaling,{"force new connection":!0}),self._socket.on("connect",function(){self._channel_open=!0,self._trigger("channelOpen")}),self._socket.on("error",function(err){console.log("API - Channel Error: "+err),self._channel_open=!1,self._trigger("channelError")}),self._socket.on("disconnect",function(){self._trigger("channelClose")}),self._socket.on("message",function(msg){self._processSigMsg(msg)})}};this._channel_open||(0===this._readyState?(this.on("readyStateChange",_openChannelImpl),this._init(this)):_openChannelImpl(2))},Skyway.prototype._closeChannel=function(){this._channel_open&&(this._socket.disconnect(),this._socket=null,this._channel_open=!1,this._readyState=0)},Skyway.prototype._createDataChannel=function(createId,receiveId,channel_name,dc){var self=this,pc=self._peerConnections[receiveId],channel_log="API - DataChannel [-]["+createId+"]: ",initialDC=!0;try{if(console.log(channel_log+"Initializing"),dc)channel_name=dc.label,onDC=!0,channel_log="API - DC [{on}"+channel_name+"]["+createId+"]: ",console.log(channel_log+"Received Status"),console.info("Channel name: "+channel_name);else{channel_name?initialDC=!1:channel_name=createId+"_"+receiveId,channel_log="API - DataChannel ["+channel_name+"]["+createId+"]: ";var options={};webrtcDetectedBrowser.isSCTPDCSupported||(options.reliable=!1,console.warn(channel_log+"Does not support SCTP")),dc=pc.createDataChannel(channel_name,options)}console.log(webrtcDetectedBrowser.mozWebRTC?channel_log+"Does support BinaryType Blob":channel_log+"Does not support BinaryType Blob"),dc.createId=createId,dc.receiveId=receiveId,dc.onerror=function(err){console.error(channel_log+"Failed retrieveing DataChannel."),console.exception(err)},dc.onclose=function(){console.log(channel_log+" closed."),self._closeDataChannel(channel_name)},dc.onopen=function(){dc.push=dc.send,dc.send=function(data){console.log(channel_log+" opened."),console.log(data),dc.push(data)}},dc.onmessage=function(event){console.log(channel_log+"dc message received"),console.info("Time received: "+(new Date).toISOString()),console.info("Size: "+event.data.length),console.info("======"),console.log(event.data),console.log(typeof event.data),self._dataChannelHandler(event.data,channel_name,self)},window.RTCDataChannels[channel_name]=dc,setTimeout(function(){console.log(channel_log+"Connection Status - "+dc.readyState),initialDC||"open"!==dc.readyState||self._sendDataChannel(channel_name,"CONN|"+channel_name)},500),console.log(channel_log+" DataChannel created.")}catch(err){return console.error(channel_log+"Failed creating DataChannel. Reason:"),void console.exception(err)}},Skyway.prototype._sendDataChannel=function(channel,data){if(!channel)return!1;var dataChannel=window.RTCDataChannels[channel];if(!dataChannel)return void console.error("API - No available existing DataChannel at this moment");console.log("API - [channel: "+channel+"]. DataChannel found"),console.log(data);try{dataChannel.send(data)}catch(err){console.error("API - [channel: "+channel+"]: An Error occurred"),console.exception(err)}},Skyway.prototype._closeDataChannel=function(channel){if(channel)try{if(!window.RTCDataChannels[channel])return void console.error('API - DataChannel "'+channel+'" does not exist');window.RTCDataChannels[channel].close()}catch(err){console.error('API - DataChannel "'+channel+'" failed to close'),console.exception(err)}finally{setTimeout(function(){delete window.RTCDataChannels[channel]},500)}},Skyway.prototype._dataChannelPeer=function(channel,self){return window.RTCDataChannels[channel].createId===self._user.id?window.RTCDataChannels[channel].receiveId:window.RTCDataChannels[channel].createId},Skyway.prototype._dataChannelHandler=function(dataString,channel,self){if("string"==typeof dataString)if(dataString.indexOf("|")>-1&&dataString.indexOf("|")<6){isProtocolEst=!0,console.log("API - DataChannel: Protocol Establishment");var data=dataString.split("|");switch(data[0]){case"CONN":console.log("API - Received CONN");break;case"WRQ":console.log("API - Received WRQ"),self._dataChannelWRQHandler(data,channel,self);break;case"ACK":console.log("API - Received ACK"),self._dataChannelACKHandler(data,channel,self);break;case"ERROR":console.log("API - Received ERROR"),self._dataChannelERRORHandler(data,channel,self);break;default:console.log('API - No event associated with: "'+data[0]+'"')}}else self._dataChannelDATAHandler(dataString,channel,"binaryString",self);else dataString instanceof ArrayBuffer?self._dataChannelDATAHandler(dataString,channel,"arrayBuffer",self):dataString instanceof Blob?self._dataChannelDATAHandler(dataString,channel,"blob",self):console.log("API - DataType ["+typeof dataString+"] is handled")},Skyway.prototype._dataChannelWRQHandler=function(data,channel,self){var acceptFile=confirm("Do you want to receive File "+data[2]+"?"),itemId=this._user.id+(new Date).toISOString().replace(/-/g,"").replace(/:/g,"").replace(".","");acceptFile?(self._downloadDataTransfers[channel]={itemId:itemId,filename:data[2],filesize:parseInt(data[3],10),data:[],ackN:0,totalReceivedSize:0,chunkSize:parseInt(data[4],10),timeout:parseInt(data[5],10),ready:!1},self._sendDataChannel(channel,"ACK|0|"+window.webrtcDetectedBrowser.browser),this._trigger("startDataTransfer",{filename:data[2],filesize:data[3],type:"download",itemId:itemId,sender:this._dataChannelPeer(channel,this)})):self._sendDataChannel(channel,"ACK|-1")},Skyway.prototype._dataChannelACKHandler=function(data,channel,self){self._clearDataChannelTimeout(channel,!0,self);
var ackN=parseInt(data[1],10),chunksLength=self._uploadDataTransfers[channel].chunks.length,timeout=self._uploadDataTransfers[channel].info.timeout;if(ackN>-1){if(console.info('API - DataChannel Received "ACK": '+ackN+" / "+chunksLength),chunksLength>ackN){var fileReader=new FileReader;fileReader.onload=function(){var base64BinaryString=fileReader.result.split(",")[1];self._sendDataChannel(channel,base64BinaryString),self._setDataChannelTimeout(channel,timeout,!0,self),self._trigger("dataTransfer",{itemId:self._uploadDataTransfers[channel].info.itemId,type:"upload",percent:(ackN+1)/chunksLength})},fileReader.readAsDataURL(self._uploadDataTransfers[channel].chunks[ackN])}else if(ackN==chunksLength){var itemId=self._uploadDataTransfers[channel].info.itemId;self._trigger("dataTransferCompleted",{itemId:itemId,user:self._dataChannelPeer(channel,self)}),setTimeout(function(){delete self._uploadDataTransfers[channel]},1200)}}else alert("User rejected your file"),delete self._uploadDataTransfers[channel]},Skyway.prototype._dataChannelERRORHandler=function(data,channel,self){var isSender;try{isSender=data[2]}catch(err){console.error("API - DataChannelERRORHandler"),console.exception(err)}self._clearDataChannelTimeout(channel,isSender,self),alert("File failed to send! Reason was:\n"+data[1]+"\nChannel: "+channel+"\nUploader: "+isSender)},Skyway.prototype._dataChannelDATAHandler=function(dataString,channel,dataType,self){console.log('API - DataChannel Received "DATA"'),console.log('API - "DATA" DataType: '+dataType),self._clearDataChannelTimeout(channel,!1,self);var chunk;if("binaryString"===dataType)chunk=self._base64ToBlob(dataString);else if("arrayBuffer"===dataType)chunk=new Blob(dataString);else{if("blob"!==dataType)return void console.error("API - Unhandled data exception: "+dataType);chunk=dataString}var completedDetails=self._downloadDataTransfers[channel],receivedSize=chunk.size*(4/3);if(console.info("API - Chunk size: "+chunk.size),console.info("API - Packet size: "+receivedSize+" / "+completedDetails.chunkSize),completedDetails.chunkSize>=receivedSize){self._downloadDataTransfers[channel].data.push(chunk),self._downloadDataTransfers[channel].ackN+=1,self._downloadDataTransfers[channel].totalReceivedSize+=receivedSize;var totalReceivedSize=self._downloadDataTransfers[channel].totalReceivedSize,percentage=totalReceivedSize/completedDetails.filesize;if(console.info("API - Percentage [size]: "+totalReceivedSize+" / "+completedDetails.filesize*(4/3)),self._sendDataChannel(channel,"ACK|"+self._downloadDataTransfers[channel].ackN+"|"+self._user.id),completedDetails.chunkSize==receivedSize)self._trigger("dataTransfer",{itemId:completedDetails.itemId,type:"download",percent:percentage}),self._setDataChannelTimeout(channel,self._downloadDataTransfers[channel].timeout,!1,self);else{var blob=new Blob(self._downloadDataTransfers[channel].data);self._trigger("dataTransfer",{filename:completedDetails.filename,filesize:completedDetails.filesize,itemId:completedDetails.itemId,type:"download",data:URL.createObjectURL(blob),percent:percentage}),setTimeout(function(){delete self._downloadDataTransfers[channel]},1200)}}else console.log("API - DataHandler: Packet not match - [Received]"+receivedSize+" / [Expected]"+completedDetails.chunkSize)},Skyway.prototype._setDataChannelTimeout=function(channel,timeout,isSender,self){var key=isSender?"_upload":"_download";self._dataTransfersTimeout[channel+key]=setTimeout(function(){isSender?self._uploadDataTransfers[channel]={}:self._downloadDataTransfers[channel]={},self._sendDataChannel(channel,"ERROR|Connection Timeout. Longer than "+timeout+" seconds. Connection is abolished.|"+isSender)},1e3*timeout)},Skyway.prototype._clearDataChannelTimeout=function(channel,isSender,self){var key=isSender?"_upload":"_download";clearTimeout(self._dataTransfersTimeout[channel+key]),delete self._dataTransfersTimeout[channel+key]},Skyway.prototype._base64ToBlob=function(dataURL){for(var byteString=atob(dataURL.replace(/\s\r\n/g,"")),ab=new ArrayBuffer(byteString.length),ia=new Uint8Array(ab),j=0;j<byteString.length;j++)ia[j]=byteString.charCodeAt(j);return new Blob([ab])},Skyway.prototype._chunkFile=function(blob,blobByteSize){var chunksArray=[],startCount=0,endCount=0;if(blobByteSize>this._chunkFileSize){for(;blobByteSize-1>endCount;)endCount=startCount+this._chunkFileSize,chunksArray.push(blob.slice(startCount,endCount)),startCount+=this._chunkFileSize;blobByteSize-(startCount+1)>0&&chunksArray.push(blob.slice(startCount,blobByteSize-1))}else chunksArray.push(blob);return chunksArray},Skyway.prototype.sendFile=function(file){console.log("API - Attaching File to Stream");var noOfPeersSent=0,itemId=this._user.id+(new Date).toISOString().replace(/-/g,"").replace(/:/g,"").replace(".",""),timeout=60;for(var channel in window.RTCDataChannels)if(window.RTCDataChannels.hasOwnProperty(channel)&&window.RTCDataChannels[channel])if("open"===window.RTCDataChannels[channel].readyState){var fileSize=(file.size*(4/3)).toFixed(),chunkSize=(this._chunkFileSize*(4/3)).toFixed();console.log("API - Preparing File Sending to Queue"),this._uploadDataTransfers[channel]={info:{name:file.name,size:fileSize,itemId:itemId,timeout:timeout},chunks:this._chunkFile(file,file.size)},this._sendDataChannel(channel,"WRQ|"+window.webrtcDetectedBrowser.browser+"|"+file.name+"|"+fileSize+"|"+chunkSize+"|"+timeout),noOfPeersSent++,this._setDataChannelTimeout(channel,timeout,!0,this)}else console.log("API - Channel["+channel+"] is not opened");else console.log("API - Channel["+channel+"] does not exists");noOfPeersSent>0?(console.log("API - Tracking File to User's chat log for Tracking"),this._trigger("startDataTransfer",{filename:file.name,filesize:file.size,type:"upload",data:URL.createObjectURL(file),itemId:itemId,sender:this._user.id})):(console.log("API - No available channels here. Impossible to send file"),this._uploadDataTransfers={})},Skyway.prototype.toggleLock=function(){},Skyway.prototype.toggleAudio=function(){},Skyway.prototype.toggleVideo=function(){},Skyway.prototype.authenticate=function(){},Skyway.prototype.joinRoom=function(){if(!this._in_room){var self=this,_sendJoinRoomMsg=function(){self.off("channelOpen",_sendJoinRoomMsg),console.log("API - Joining room: "+self._room.id),self._sendMessage({type:"joinRoom",mid:self._user.id,cid:self._key,rid:self._room.id,userCred:self._user.token,timeStamp:self._user.timeStamp,apiOwner:self._user.apiOwner,roomCred:self._room.token,start:self._room.start,len:self._room.len}),this._user.peer=this._createPeerConnection(this._user.id)};this._channel_open?_sendJoinRoomMsg():(this.on("channelOpen",_sendJoinRoomMsg),this._openChannel())}},Skyway.prototype.leaveRoom=function(){if(this._in_room){for(var pc_index in this._peerConnections)this._peerConnections.hasOwnProperty(pc_index)&&this._removePeer(pc_index);this._in_room=!1,this._closeChannel()}},Skyway.prototype.getContacts=function(){!this._in_room},Skyway.prototype.getUser=function(){},Skyway.prototype.inviteContact=function(){}}).call(this);