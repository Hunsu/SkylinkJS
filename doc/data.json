{
    "project": {
        "name": "skylinkjs",
        "description": "SkylinkJS is an open-source client-side library for your web-browser that enables any website to easily leverage the capabilities of WebRTC and its direct data streaming powers between peers for audio/video conferencing or file transfer.",
        "version": "0.6.1",
        "url": "https://temasys.github.io/"
    },
    "files": {
        "source/template/header.js": {
            "name": "source/template/header.js",
            "modules": {},
            "classes": {
                "Skylink": 1
            },
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-channel.js": {
            "name": "source/data-channel.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-process.js": {
            "name": "source/data-process.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/data-transfer.js": {
            "name": "source/data-transfer.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/ice-candidate.js": {
            "name": "source/ice-candidate.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/ice-connection.js": {
            "name": "source/ice-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-connection.js": {
            "name": "source/peer-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-data.js": {
            "name": "source/peer-data.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/peer-handshake.js": {
            "name": "source/peer-handshake.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/room-connection.js": {
            "name": "source/room-connection.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/room-init.js": {
            "name": "source/room-init.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/skylink-debug.js": {
            "name": "source/skylink-debug.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/skylink-events.js": {
            "name": "source/skylink-events.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/socket-channel.js": {
            "name": "source/socket-channel.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/socket-message.js": {
            "name": "source/socket-message.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/stream-media.js": {
            "name": "source/stream-media.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        },
        "source/stream-sdp.js": {
            "name": "source/stream-sdp.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Skylink": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Skylink": {
            "name": "Skylink",
            "shortname": "Skylink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "source/template/header.js",
            "line": 97,
            "description": "<h2>Before using Skylink</h2>\nPlease invoke {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}} method\nfirst to initialise the Application Key before using any functionalities in Skylink.\nIf you do not have an Application Key, you may\n[register for a Skylink platform developer account](http://developer.temasys.com.sg).<br>\n\nTo get started you may [visit the getting started page](https://temasys.github.io/how-to/2014/08/08/\nGetting_started_with_WebRTC_and_SkylinkJS/), or alternatively fork a ready made demo application\nthat uses Skylink Web SDK at [getaroom.io](http://getaroom.io/).\n\n<b>Tips on using Skylink</b>:\n- Subscribe Skylink events before calling\n  {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}}.\n- For debugging purposes, please using the non-minified versions of the script and add\n  {{#crossLink \"Skylink/setLogLevel:method\"}}setLogLevel(){{/crossLink}} method before\n  calling {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}}. This will enable you\n  to see all the logs in the Web console for Skylink. For more extensive debugging mode,\n  you may use the method\n  {{#crossLink \"Skylink/setDebugMode:method\"}}setDebugMode(){{/crossLink}}. This has to\n  be called before {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}}.\n- Never call methods in state event subscriptions in <i>E.g.\n  {{#crossLink \"Skylink/readyStateChange:event\"}}readyStateChange{{/crossLink}},\n  {{#crossLink \"Skylink/iceConnectionState:event\"}}iceConnectionState{{/crossLink}} etc.</i>\n  as they may result in an inifinite loop.\n- If you are experiencing issues with encoding, make sure that the script tag contains\n  the <code>charset=\"UTF8\"</code> attribute.\n- If you are getting any <code>401</code> or <code>402</code> errors, please make sure\n  that your Application Key CORS is configured with the correct accessing domain.\n- It's recommended to do try / catches in your event subscription handlers along with\n  proper checks as expection errors in event handlers are a cause of errors in application.",
            "is_constructor": 1,
            "example": [
                "\n  // Here's a simple example on how you can start using Skylink\n  var sw = new Skylink();\n\n  // Subscribe all events first before init()\n  sw.on(\"incomingStream\", function (peerId, stream, peerInfo, isSelf) {\n    if (isSelf) {\n      attachMediaStream(document.getElementById(\"selfVideo\"), stream);\n    } else {\n      var peerVideo = document.createElement(\"video\");\n      peerVideo.id = peerId;\n      peerVideo.autoplay = \"autoplay\";\n      document.getElementById(\"peersVideo\").appendChild(peerVideo);\n      attachMediaStream(peerVideo, stream);\n    }\n  });\n\n  sw.on(\"peerLeft\", function (peerId, peerInfo, isSelf) {\n    if (!isSelf) {\n      var peerVideo = document.getElementById(peerId);\n      // do a check if peerVideo exists first\n      if (peerVideo) {\n        document.getElementById(\"peersVideo\").removeChild(peerVideo);\n      } else {\n        console.error(\"Peer video for \" + peerId + \" is not found.\");\n      }\n    }\n  });\n\n // never call joinRoom in readyStateChange event subscription.\n // call joinRoom after init() callback if you want to joinRoom instantly.\n sw.on(\"readyStateChange\", function (state, room) {\n   console.log(\"Room (\" + room + \") state: \", room);\n })\n\n // always remember to call init()\n sw.init(\"YOUR_APP_KEY_HERE\", function (error, success) {\n   // do a check for error or success\n   if (error) {\n     console.error(\"Init failed: \", error);\n   } else {\n     SkylinkDemo.joinRoom(\"my_room\", {\n       userData: \"My Username\",\n       audio: true,\n       video: true\n     });\n   }\n });"
            ],
            "since": "0.5.0"
        }
    },
    "classitems": [
        {
            "file": "source/template/header.js",
            "line": 186,
            "description": "The current version of Skylink Web SDK.",
            "itemtype": "attribute",
            "name": "VERSION",
            "type": "String",
            "readonly": "",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/template/header.js",
            "line": 196,
            "description": "Helper function that generates an Unique ID (UUID) string.",
            "itemtype": "method",
            "name": "generateUUID",
            "return": {
                "description": "Generated Unique ID (UUID) string.",
                "type": "String"
            },
            "since": "0.5.9",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 1,
            "description": "The list of Skylink DataChannel connection triggered states.",
            "itemtype": "attribute",
            "name": "DATA_CHANNEL_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "CONNECTING",
                    "description": "Attempting to establish a connection.",
                    "type": "String"
                },
                {
                    "name": "OPEN",
                    "description": "Connection is established.",
                    "type": "String"
                },
                {
                    "name": "CLOSING",
                    "description": "Connection is closing.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "Connection is closed.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "Connection have met with an exception.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "DataChannel",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 23,
            "description": "The types of Skylink DataChannel that serves different functionalities.",
            "itemtype": "attribute",
            "name": "DATA_CHANNEL_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "MESSAGING",
                    "description": "DataChannel that is used for messaging only.\n  This is the sole channel for sending P2P messages in\n  {{#crossLink \"Skylink/sendP2PMessage:method\"}}sendP2PMessage(){{/crossLink}}.\n  This connection will always be kept alive until the PeerConnection has\n  ended.",
                    "type": "String"
                },
                {
                    "name": "DATA",
                    "description": "DataChannel that is used temporarily for a data transfer.\n  This is using caused by methods\n  {{#crossLink \"Skylink/sendBlobData:method\"}}sendBlobData(){{/crossLink}}\n  and {{#crossLink \"Skylink/sendURLData:method\"}}sendURLData(){{/crossLink}}.\n  This connection will be closed once the transfer has completed or terminated.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "DataChannel",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 47,
            "description": "The flag that indicates if PeerConnections should have any\n  DataChannel connections.",
            "itemtype": "attribute",
            "name": "_enableDataChannel",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataChannel",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 61,
            "description": "Stores the list of DataChannel connections.",
            "itemtype": "attribute",
            "name": "_dataChannels",
            "params": [
                {
                    "name": "(#peerId)",
                    "description": "The DataChannel connection with the\n  associated PeerConnection.",
                    "type": "Array"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataChannel",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 75,
            "description": "Starts a DataChannel connection with a PeerConnection. If the\n  DataChannel is provided in the parameter, it simply appends\n  event handlers to check the current state of the DataChannel.",
            "itemtype": "method",
            "name": "_createDataChannel",
            "params": [
                {
                    "name": "peerId",
                    "description": "The PeerConnection ID to start the\n  DataChannel with or associate the provided DataChannel object\n  connection with.",
                    "type": "String"
                },
                {
                    "name": "channelType",
                    "description": "The DataChannel functionality type.\n  [Rel: Skylink.DATA_CHANNEL_TYPE]",
                    "type": "String"
                },
                {
                    "name": "dataChannel",
                    "description": "The RTCDataChannel object received\n  in the PeerConnection <code>.ondatachannel</code> event.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "customChannelName",
                    "description": "The custom RTCDataChannel label\n  name to identify the different opened channels.",
                    "type": "String"
                }
            ],
            "trigger": "dataChannelState",
            "return": {
                "description": "The DataChannel connection object associated with\n  the provided PeerConnection ID.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "component": "DataChannel",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 252,
            "description": "Sends data over the DataChannel associated with the PeerConnection.\nThe current supported data type is <code>string</code>. <code>Blob</code>,\n  <code>ArrayBuffer</code> types support is not yet currently handled or\n  implemented.",
            "itemtype": "method",
            "name": "_sendDataChannelMessage",
            "params": [
                {
                    "name": "peerId",
                    "description": "The PeerConnection ID to send the data to the\n  associated DataChannel connection.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data to send over. <code>string</code> is only\n  used to send binary data string over. <code>JSON</code> is primarily used\n  for the {{#crossLink \"Skylink/DT_PROTOCOL_VERSION:attr\"}}DT Protocol{{/crossLink}}\n  that the Web SDK follows for P2P messaging and transfers.",
                    "type": "JSON|String"
                },
                {
                    "name": "channelKey",
                    "description": "The DataChannel ID of the connection\n  to send the data over to. The datachannel to send messages to. By default,\n  if the DataChannel ID is not provided, the DataChannel connection associated\n  with the ID <code>\"main\"</code> would be used.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"main\""
                }
            ],
            "trigger": "dataChannelState",
            "access": "private",
            "tagname": "",
            "component": "DataChannel",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-channel.js",
            "line": 325,
            "description": "Stops DataChannel connection(s) associated with a PeerConnection\n  and remove any object references to the DataChannel connection(s).",
            "itemtype": "method",
            "name": "_closeDataChannel",
            "params": [
                {
                    "name": "peerId",
                    "description": "The PeerConnection ID associated with the DataChannel\n  connection(s) to close.",
                    "type": "String"
                },
                {
                    "name": "channelName",
                    "description": "The targeted DataChannel ID to close the\n  connection with. If channelName is not provided, all associated DataChannel\n  connections with the PeerConnection would be closed.",
                    "type": "String",
                    "optional": true
                }
            ],
            "trigger": "dataChannelState",
            "access": "private",
            "tagname": "",
            "component": "DataChannel",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 1,
            "description": "The fixed data chunk size for\n  [<code>Blob</code>](https://developer.mozilla.org/en/docs/Web/API/Blob)\n  data type for transfers using DataChannel connection.",
            "itemtype": "attribute",
            "name": "_CHUNK_FILE_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "component": "DataProcess",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 16,
            "description": "The fixed data chunk size for\n  [<code>dataURL</code>](https://developer.mozilla.org/en-US/docs/Web/HTTP/data_URIs)\n  (which is a type of \"string\" and known as data URIs)\n  data type for transfers using DataChannel connection.",
            "itemtype": "attribute",
            "name": "_CHUNK_DATAURL_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "component": "DataProcess",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 32,
            "description": "The fixed data chunk size for\n  [<code>Blob</code>](https://developer.mozilla.org/en/docs/Web/API/Blob)\n  data type for transfers using DataChanel connection on\n  Firefox based browsers.\nLimitations is different for Firefox as tested in some PCs (linux predominantly)\n  that sending a packet size of <code>49152</code>kb from another browser\n  reflects as <code>16384</code>kb packet size when received.",
            "itemtype": "attribute",
            "name": "_MOZ_CHUNK_FILE_SIZE",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "component": "DataProcess",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 51,
            "description": "The list of data types that is transferred using the DataChannel connection.\nThe current supported data type is <code>string</code>. <code>Blob</code>,\n  <code>ArrayBuffer</code> types support is not yet currently handled or\n  implemented.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_DATA_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "BINARY_STRING",
                    "description": "Data is transferred using\n  [binary converted strings](https://developer.mozilla.org/en-US/\n  docs/Web/HTTP/data_URIs).",
                    "type": "String"
                },
                {
                    "name": "ARRAY_BUFFER",
                    "description": "Data is transferred using\n  [ArrayBuffers](https://developer.mozilla.org/en-US/docs/Web/JavaScript\n /Reference/Global_Objects/ArrayBuffer).",
                    "type": "String"
                },
                {
                    "name": "BLOB",
                    "description": "Data is transferred using\n  [Blobs](https://developer.mozilla.org/en/docs/Web/API/Blob).",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "DataProcess",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 77,
            "description": "Converts a binary string (base64) string derived from\n [dataURL conversion](https://developer.mozilla.org/en-US\n  /docs/Web/API/FileReader/readAsDataURL)\n  to a Blob data object.<br>\n<i>Author: devnull69@stackoverflow.com #6850276</i>",
            "itemtype": "method",
            "name": "_base64ToBlob",
            "params": [
                {
                    "name": "dataURL",
                    "description": "The binary string (base64) to convert.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The converted Blob data object.",
                "type": "Blob"
            },
            "access": "private",
            "tagname": "",
            "component": "DataProcess",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 103,
            "description": "Converts a Blob data object into a binary string (base64) using\n  [dataURL conversion](https://developer.mozilla.org/en-US\n  /docs/Web/API/FileReader/readAsDataURL)",
            "itemtype": "method",
            "name": "_blobToBase64",
            "params": [
                {
                    "name": "data",
                    "description": "The Blob data object to convert.",
                    "type": "Blob"
                },
                {
                    "name": "callback",
                    "description": "The callback triggered when Blob data\n  conversion to binary string (base64) has completed.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "data",
                            "description": "The converted binary string (base64).",
                            "type": "String"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataProcess",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 127,
            "description": "Chunks a huge Blob data object into smaller Blob data object chunks\n  based on the chunk sizes provided.\nIf provided Blob data object is smaller than chunk sizes, it will return an array\n  length of <code>1</code> with the Blob data object.",
            "itemtype": "method",
            "name": "_chunkBlobData",
            "params": [
                {
                    "name": "blob",
                    "description": "The huge Blob binary data object.",
                    "type": "Blob"
                },
                {
                    "name": "chunkSize",
                    "description": "The chunk size that the Blob binary data should be cut\n  into.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The array of chunked Blob data objects based on the Blob data\n  object provided.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "DataProcess",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 166,
            "description": "Chunks a huge dataURL string (base64 binary string)\n into smaller strings based on the chunk length provided.\nIf provided dataURL string is smaller than chunk length, it will return an array\n  length of <code>1</code> with the dataURL string.",
            "itemtype": "method",
            "name": "_chunkDataURL",
            "params": [
                {
                    "name": "dataURL",
                    "description": "The huge dataURL string (binary string).",
                    "type": "String"
                },
                {
                    "name": "chunkSize",
                    "description": "The string (chunk) length that the dataURL string\n  should be cut into.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The array of chunked dataURL strings (base64 binary string)\n  based on the dataURL string provided.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "DataProcess",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-process.js",
            "line": 207,
            "description": "Assemble the string chunks of a chunked dataURL string (base64 binary string)\n  into the original huge dataURL string.",
            "itemtype": "method",
            "name": "_assembleDataURL",
            "params": [
                {
                    "name": "dataURLArray",
                    "description": "The array of chunked dataURL strings\n  (base64 binary string) based on the dataURL string provided.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The original huge dataURL string (base64 binary string).",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "component": "DataProcess",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1,
            "description": "The current version of DT (Data Transfer) Protocol\n  that the SDK is using.",
            "itemtype": "attribute",
            "name": "DT_PROTOCOL_VERSION",
            "type": "String",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 13,
            "description": "The fixed delimiter that is used in the Web SDK to\n  concat the DataChannel ID and actual transfer ID together based\n  on the transfer ID provided in\n  {{#crossLink \"Skylink/dataTransferState:event\"}}dataTransferState{{/crossLink}}.",
            "itemtype": "attribute",
            "name": "_TRANSFER_DELIMITER",
            "type": "String",
            "required": 1,
            "final": 1,
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 29,
            "description": "The list of Protocol types that is used for transfers and messaging using\n  the DataChannel connection.",
            "itemtype": "attribute",
            "name": "_DC_PROTOCOL_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "WRQ",
                    "description": "Protocol to initiate a transfer request on the current\n  DataChannel connection. Data transfer step 1.",
                    "type": "String"
                },
                {
                    "name": "ACK",
                    "description": "Protocol to accept or reject the transfer request.\n  Data transfer step 2.",
                    "type": "String"
                },
                {
                    "name": "DATA",
                    "description": "Actual binary data or string send based on the\n  <code>ackN</code> in the <code>ACK</code> packet received.\n  Data transfer step 3. This may not occur is step 2 is rejected.",
                    "type": "String"
                },
                {
                    "name": "CANCEL",
                    "description": "Protocol to terminate an ongoing transfer.\n  This data transfer step can happen after step 2 or 3.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "Protocol that is sent when a transfer occurs an exception\n  which using causes it to be terminated.\n  This data transfer step can happen after step 2 or 3.",
                    "type": "String"
                },
                {
                    "name": "MESSAGE",
                    "description": "Protocol that is used to send P2P message objects\n  over the DataChannel connection.\n  This is not related to any data transfer step, but for messaging purposes.",
                    "type": "String"
                }
            ],
            "final": 1,
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 63,
            "description": "The list of platforms that the Web SDK should fallback to use the\n  {{#crossLink \"Skylink/DATA_CHANNEL_TYPE:attr\"}}<code>\n  DATA_CHANNEL_TYPE.MESSAGING</code>{{/crossLink}}\n  channel for transfers instead of using multi-transfers\n  due to the lack of support in the platform implementations.",
            "itemtype": "attribute",
            "name": "_INTEROP_MULTI_TRANSFERS",
            "type": "Array",
            "final": 1,
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 79,
            "description": "The types of data transfers to indicate if the DataChannel is\n  uploading or downloading the data transfer.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "UPLOAD",
                    "description": "The DataChannel connection is uploading data packets to\n  receiving end.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD",
                    "description": "The DataChannel connection is downloading data packets\n  from sending point.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "DataTransfer",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 98,
            "description": "The states of a data transfer in a DataChannel connection.",
            "itemtype": "attribute",
            "name": "DATA_TRANSFER_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "UPLOAD_REQUEST",
                    "description": "Request to start a data transfer.",
                    "type": "String"
                },
                {
                    "name": "UPLOAD_STARTED",
                    "description": "Request to start the data transfer has been accepted\n  and data transfer is starting to upload data packets to receiving end.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD_STARTED",
                    "description": "Request to start the data transfer has been accepted\n  and data transfer is starting to receive data packets from sending point.",
                    "type": "String"
                },
                {
                    "name": "REJECTED",
                    "description": "Request to start a data transfer is rejected.",
                    "type": "String"
                },
                {
                    "name": "UPLOADING",
                    "description": "The data transfer upload is ongoing with receiving end.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOADING",
                    "description": "The data transfer download is ongoing with sending point.",
                    "type": "String"
                },
                {
                    "name": "UPLOAD_COMPLETED",
                    "description": "The data transfer uploaded to receiving end has\n  been completed successfully.",
                    "type": "String"
                },
                {
                    "name": "DOWNLOAD_COMPLETED",
                    "description": "The data transfer downloaded from sending point\n  has been completed successfully.",
                    "type": "String"
                },
                {
                    "name": "CANCEL",
                    "description": "The ongoing data transfer has cancelled from receiving end\n  or sending point and has been terminated.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "The ongoing data transfer has occurred an exception and\n  has been terminated.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "DataTransfer",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 136,
            "description": "Stores the list of ongoing data transfers data packets (chunks) to be sent to receiving end\n  in a DataChannel connection based on the associated DataChannel ID.",
            "itemtype": "attribute",
            "name": "_uploadDataTransfers",
            "params": [
                {
                    "name": "(#channelName)",
                    "description": "The ongoing data transfer packets to be sent to\n  receiving end associated with the DataChannel connection.",
                    "type": "Array"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 151,
            "description": "Stores the list of ongoing data transfer state informations that is sent to receiving end\n  in a DataChannel connection based on the associated DataChannel ID.",
            "itemtype": "attribute",
            "name": "_uploadDataSessions",
            "params": [
                {
                    "name": "(#channelName)",
                    "description": "The ongoing data transfer information that is sent\n  to receiving end associated with the DataChannel connection.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "The data transfer name.",
                            "type": "String"
                        },
                        {
                            "name": "size",
                            "description": "The expected data size of the\n  completed data transfer.",
                            "type": "Number"
                        },
                        {
                            "name": "isUpload",
                            "description": "The flag that indicates if the\n  transfer is an upload data transfer.\n  In this case, the value should be <code>true</code>.",
                            "type": "Boolean"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "The PeerConnection uploader ID.",
                            "type": "String"
                        },
                        {
                            "name": "transferId",
                            "description": "The data transfer ID.",
                            "type": "String"
                        },
                        {
                            "name": "percentage",
                            "description": "The data transfer percentage.",
                            "type": "Number"
                        },
                        {
                            "name": "timeout",
                            "description": "The data transfer timeout.",
                            "type": "Number"
                        },
                        {
                            "name": "chunkSize",
                            "description": "The data transfer packet (chunk) size.",
                            "type": "Number"
                        },
                        {
                            "name": "dataType",
                            "description": "The data transfer packet (chunk) data type.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 178,
            "description": "Stores the list of ongoing data transfers data packets (chunks) to be received from\n  sending point in a DataChannel connection based on the associated DataChannel ID.",
            "itemtype": "attribute",
            "name": "_downloadDataTransfers",
            "params": [
                {
                    "name": "(#channelName)",
                    "description": "The ongoing data transfer packets received\n  associated with DataChannel.",
                    "type": "Array"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 193,
            "description": "Stores the list of ongoing data transfer state informations that is received from\n  the sender point in a DataChannel connection based on the associated DataChannel ID.",
            "itemtype": "attribute",
            "name": "_downloadDataSessions",
            "params": [
                {
                    "name": "(#channelName)",
                    "description": "The ongoing data transfer information that is sent\n  to receiving end associated with the DataChannel connection.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "The data transfer name.",
                            "type": "String"
                        },
                        {
                            "name": "size",
                            "description": "The expected data size of the\n  completed data transfer.",
                            "type": "Number"
                        },
                        {
                            "name": "isUpload",
                            "description": "The flag that indicates if the\n  transfer is an upload data transfer.\n  In this case, the value should be <code>false</code>.",
                            "type": "Boolean"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "The PeerConnection uploader ID.",
                            "type": "String"
                        },
                        {
                            "name": "transferId",
                            "description": "The data transfer ID.",
                            "type": "String"
                        },
                        {
                            "name": "percentage",
                            "description": "The data transfer percentage.",
                            "type": "Number"
                        },
                        {
                            "name": "timeout",
                            "description": "The data transfer timeout to wait for response\n  before throwing a timeout error.",
                            "type": "Number"
                        },
                        {
                            "name": "chunkSize",
                            "description": "The data transfer packet (chunk) size.",
                            "type": "Number"
                        },
                        {
                            "name": "dataType",
                            "description": "The data transfer packet (chunk) data type.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 221,
            "description": "Stores the list of ongoing data transfer timeouts using the\n  <code>setTimeout</code> objects for each DataChannel connection transfer.",
            "itemtype": "attribute",
            "name": "_dataTransfersTimeout",
            "params": [
                {
                    "name": "(#channelName)",
                    "description": "The timeout for the associated DataChannel\n  connection.",
                    "type": "Object"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "DataTransfer",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 236,
            "description": "Sets a waiting timeout for every response sent to DataChannel connection receiving\n  end. Once the timeout has ended, a timeout error will be thrown and\n  data transfer will be terminated.",
            "itemtype": "method",
            "name": "_setDataChannelTimeout",
            "params": [
                {
                    "name": "peerId",
                    "description": "The PeerConnection ID associated with the DataChannel connection.",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "The waiting timeout in seconds.",
                    "type": "Number"
                },
                {
                    "name": "isSender",
                    "description": "The flag thats indicates if the response\n  is related to a downloading or uploading data transfer.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel connection ID.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 289,
            "description": "Stops and clears the waitig timeout for the associated DataChannel connection.",
            "itemtype": "method",
            "name": "_clearDataChannelTimeout",
            "params": [
                {
                    "name": "peerId",
                    "description": "The PeerConnection ID associated with the DataChannel connection.",
                    "type": "String"
                },
                {
                    "name": "isSender",
                    "description": "The flag thats indicates if the response\n  is related to a downloading or uploading data transfer.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel connection ID.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 312,
            "description": "Starts a data transfer with a PeerConnection. If multi-transfer is supported, the\n  Web SDK would open a new DataChannel connection with PeerConnection to start\n  data transfer. If mutli-transfer is not supported in\n  {{#crossLink \"Skylink/_INTEROP_MULTI_TRANSFERS:attr\"}}_INTEROP_MULTI_TRANSFERS{{/crossLink}},\n  the data transfer would start in the {{#crossLink \"Skylink/DATA_CHANNEL_TYPE:attr\"}}<code>\n  DATA_CHANNEL_TYPE.MESSAGING</code>{{/crossLink}} channel instead.",
            "itemtype": "method",
            "name": "_sendBlobDataToPeer",
            "params": [
                {
                    "name": "data",
                    "description": "The Blob data object to send.",
                    "type": "Blob",
                    "props": [
                        {
                            "name": "target",
                            "description": "The targeted PeerConnection ID to relay data to for the case of where\n  MCU is enabled.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "dataInfo",
                    "description": "The data transfer information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "transferId",
                            "description": "The transfer ID of the data transfer.",
                            "type": "String"
                        },
                        {
                            "name": "name",
                            "description": "The transfer Blob data object name.",
                            "type": "String"
                        },
                        {
                            "name": "timeout",
                            "description": "The timeout set to await in seconds\n  for response from DataChannel connection.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "60"
                        },
                        {
                            "name": "size",
                            "description": "The Blob data binary size expected to be received in the receiving end.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "targetPeerId",
                    "description": "The receiving PeerConnection ID. Array is used for\n  MCU connection where multi-targeted PeerConnections are used. By default, the\n  value is <code>null</code>, which indicates that the data transfer is requested with all\n  connected PeerConnections.",
                    "type": "String|Array",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "isPrivate",
                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "transferId",
                    "description": "The transfer ID of the data transfer.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The DataChannel connection ID associated with the transfer. If returned\n  as <code>null</code> or empty, it indicates an error.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 520,
            "description": "Routes the data received to the relevant Protocol handler based on the data received.",
            "itemtype": "method",
            "name": "_dataChannelProtocolHandler",
            "params": [
                {
                    "name": "data",
                    "description": "The data received from the DataChannel connection.",
                    "type": "String|Object"
                },
                {
                    "name": "senderPeerId",
                    "description": "The DataChannel connection associated with the PeerConnection.",
                    "type": "String"
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel connection ID.",
                    "type": "String"
                },
                {
                    "name": "channelType",
                    "description": "The DataChannel connection functionality type.\n  [Rel: Skylink.DATA_CHANNEL_TYPE]",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 592,
            "description": "Handles the WRQ Protocol request received from the DataChannel connection.",
            "itemtype": "method",
            "name": "_WRQProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The PeerConnection ID associated with the DataChannel connection.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from the DataChannel connection.\n  This should contain the <code>WRQ</code> payload.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "agent",
                            "description": "The sender PeerConnection platform browser or agent name.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The sender PeerConnection platform browser or agent version.",
                            "type": "Number"
                        },
                        {
                            "name": "name",
                            "description": "The transfer data object name.",
                            "type": "String"
                        },
                        {
                            "name": "size",
                            "description": "The transfer data object expected received size.",
                            "type": "Number"
                        },
                        {
                            "name": "chunkSize",
                            "description": "The expected data transfer packet (chunk) size.",
                            "type": "Number"
                        },
                        {
                            "name": "timeout",
                            "description": "The timeout set to await in seconds\n  for response from DataChannel connection.",
                            "type": "Number"
                        },
                        {
                            "name": "isPrivate",
                            "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                            "type": "Boolean"
                        },
                        {
                            "name": "sender",
                            "description": "The sender PeerConnection ID.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step <code>\"WRQ\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel connection ID associated with the transfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 660,
            "description": "Handles the ACK Protocol request received from the DataChannel connection.",
            "itemtype": "method",
            "name": "_ACKProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The PeerConnection ID associated with the DataChannel connection.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from the DataChannel connection.\n  This should contain the <code>ACK</code> payload.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "ackN",
                            "description": "The ACK response of the current data transfer.\n  If <code>0</code>, it means that the request has been accepted and the sending PeerConnection\n  has to send the first data transfer packet (chunk). If it's greater than <code>0</code>,\n  it means that the previous data transfer packet (chunk) has been received and is expecting\n  for the next data transfer packet. The number always increment based on the number of data\n  packets the receiving end has received. If it's <code>-1</code>, it means that the data\n  transfer request has been rejected and the data transfer will be terminated.",
                            "type": "Number"
                        },
                        {
                            "name": "sender",
                            "description": "The sender PeerConnection ID.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step <code>\"ACK\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel connection ID associated with the transfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 800,
            "description": "Handles the MESSAGE Protocol request received from the DataChannel connection.",
            "itemtype": "method",
            "name": "_MESSAGEProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The PeerConnection ID associated with the DataChannel connection.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from the DataChannel connection.\n  This should contain the <code>MESSAGE</code> payload.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "target",
                            "description": "The targeted PeerConnection ID to receive the message object.",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "The message object.",
                            "type": "String|JSON"
                        },
                        {
                            "name": "sender",
                            "description": "The sender PeerConnection ID.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step <code>\"MESSAGE\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel connection ID associated with the transfer.",
                    "type": "String"
                }
            ],
            "trigger": "incomingMessage",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 830,
            "description": "Handles the ERROR Protocol request received from the DataChannel connection.",
            "itemtype": "method",
            "name": "_ERRORProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The PeerConnection ID associated with the DataChannel connection.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from the DataChannel connection.\n  This should contain the <code>ERROR</code> payload.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "The transfer data object name.",
                            "type": "String"
                        },
                        {
                            "name": "content",
                            "description": "The error message.",
                            "type": "String"
                        },
                        {
                            "name": "isUploadError",
                            "description": "The flag thats indicates if the response\n  is related to a downloading or uploading data transfer.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "sender",
                            "description": "The sender PeerConnection ID.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step <code>\"ERROR\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel connection ID associated with the transfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 880,
            "description": "Handles the CANCEL Protocol request received from the DataChannel connection.",
            "itemtype": "method",
            "name": "_CANCELProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The PeerConnection ID associated with the DataChannel connection.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object received from the DataChannel connection.\n  This should contain the <code>CANCEL</code> payload.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "The transfer data object name.",
                            "type": "String"
                        },
                        {
                            "name": "content",
                            "description": "The reason for termination as a message.",
                            "type": "String"
                        },
                        {
                            "name": "sender",
                            "description": "The sender PeerConnection ID.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step <code>\"CANCEL\"</code>.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel connection ID associated with the transfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 967,
            "description": "Handles the DATA Protocol request received from the DataChannel connection.\nIn this handler, it actually handles and manipulates the received data transfer packet.",
            "itemtype": "method",
            "name": "_DATAProtocolHandler",
            "params": [
                {
                    "name": "senderPeerId",
                    "description": "The PeerConnection ID associated with the DataChannel connection.",
                    "type": "String"
                },
                {
                    "name": "dataString",
                    "description": "The data transfer packet (chunk) received.",
                    "type": "ArrayBuffer|Blob|String"
                },
                {
                    "name": "dataType",
                    "description": "The data transfer packet (chunk) data type received.\n  [Rel: Skylink.DATA_TRANSFER_DATA_TYPE]",
                    "type": "String"
                },
                {
                    "name": "channelName",
                    "description": "The DataChannel connection ID associated with the transfer.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1174,
            "description": "Starts a [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) data transfer\n  with PeerConnections using the DataChannel connection.\nYou can transfer files using the <code>input</code> [fileupload object](\n  http://www.w3schools.com/jsref/dom_obj_fileupload.asp) and accessing the receiving\n  files using [FileUpload files property](http://www.w3schools.com/jsref/prop_fileupload_files.asp).\nThe [File](https://developer.mozilla.org/en/docs/Web/API/File) object inherits from\n  the Blob interface which is passable in this method as a Blob object.\nThe receiving PeerConnections have the option to accept or reject the data transfer.",
            "itemtype": "method",
            "name": "sendBlobData",
            "params": [
                {
                    "name": "data",
                    "description": "The Blob data object to transfer to PeerConnections.",
                    "type": "Blob"
                },
                {
                    "name": "timeout",
                    "description": "The waiting timeout in seconds that the DataChannel connection\n  data transfer should wait before throwing an exception and terminating the data transfer.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "60"
                },
                {
                    "name": "targetPeerId",
                    "description": "The array of targeted PeerConnections to transfer the\n  data object to. Alternatively, you may provide this parameter as a string to a specific\n  targeted PeerConnection to transfer the data object.",
                    "type": "String|Array",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The callback fired after all the data transfers is completed\n  successfully or met with an exception. The callback signature is <code>function (error, success)</code>.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object received in the callback.\n  If received as <code>null</code>, it means that there is no errors.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "state",
                                    "description": "<i>Deprecated</i>. The\n  {{#crossLink \"Skylink/dataTransferState:event\"}}dataTransferState{{/crossLink}}\n  when the error has occurred. This only triggers for a single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "error",
                                    "description": "<i>Deprecated</i>. The error received when the\n  data transfer fails. This only triggers for single targeted PeerConnection data transfer.",
                                    "type": "Object|String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "transferId",
                                    "description": "The transfer ID of the failed data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "peerId",
                                    "description": "The single targeted PeerConnection ID for the data transfer.\n  This only triggers for single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of PeerConnection that the data transfer has been\n  initiated with.",
                                    "type": "Array"
                                },
                                {
                                    "name": "isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "transferErrors",
                                    "description": "The list of errors occurred based on per PeerConnection\n  basis.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferErrors.(#peerId)",
                                    "description": "The error that occurred when having\n  a DataChannel connection data transfer with associated PeerConnection.",
                                    "type": "Object|String"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The transfer data object information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferInfo.name",
                                    "description": "The transfer data object name.\n  If there is no name based on the Blob given, the name would be the transfer ID.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "transferId"
                                },
                                {
                                    "name": "transferInfo.size",
                                    "description": "The transfer data size.",
                                    "type": "Number"
                                },
                                {
                                    "name": "transferInfo.transferId",
                                    "description": "The data transfer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.dataType",
                                    "description": "The type of data transfer initiated.\n  Available types are <code>\"dataURL\"</code> and <code>\"blob\"</code>.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.timeout",
                                    "description": "The waiting timeout in seconds that the DataChannel\n  connection data transfer should wait before throwing an exception and terminating the data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "success",
                            "description": "The success object received in the callback.\n  If received as <code>null</code>, it means that there are errors.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "state",
                                    "description": "<i>Deprecated</i>. The\n  {{#crossLink \"Skylink/dataTransferState:event\"}}dataTransferState{{/crossLink}}\n  when the data transfer has been completed successfully.\n  This only triggers for a single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "transferId",
                                    "description": "The transfer ID of the successful data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "peerId",
                                    "description": "The single targeted PeerConnection ID for the data transfer.\n  This only triggers for single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of PeerConnection that the data transfer has been\n  initiated with.",
                                    "type": "Array"
                                },
                                {
                                    "name": "isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The transfer data object information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferInfo.name",
                                    "description": "The transfer data object name.\n  If there is no name based on the Blob given, the name would be the transfer ID.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "transferId"
                                },
                                {
                                    "name": "transferInfo.size",
                                    "description": "The transfer data size.",
                                    "type": "Number"
                                },
                                {
                                    "name": "transferInfo.transferId",
                                    "description": "The data transfer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.dataType",
                                    "description": "The type of data transfer initiated.\n  Available types are <code>\"dataURL\"</code> and <code>\"blob\"</code>.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.timeout",
                                    "description": "The waiting timeout in seconds that the DataChannel\n  connection data transfer should wait before throwing an exception and terminating the data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: Send file to all peers connected\n  SkylinkDemo.sendBlobData(file, 67);\n\n  // Example 2: Send file to individual peer\n  SkylinkDemo.sendBlobData(blob, 87, targetPeerId);\n\n  // Example 3: Send file with callback\n  SkylinkDemo.sendBlobData(data,{\n     name: data.name,\n     size: data.size\n   },function(error, success){\n    if (error){\n      console.error(\"Error happened. Could not send file\", error);\n    }\n    else{\n      console.info(\"Successfully uploaded file\");\n    }\n  });"
            ],
            "trigger": "dataTransferState",
            "since": "0.5.5",
            "component": "DataTransfer",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1417,
            "description": "Starts the actual data transfers with the array of PeerConnections provided\n  and based on the data transfer type to start the DataChannel connection data transfer.",
            "itemtype": "method",
            "name": "_startDataTransfer",
            "params": [
                {
                    "name": "data",
                    "description": "The transfer data object.",
                    "type": "Blob|String"
                },
                {
                    "name": "dataInfo",
                    "description": "The transfer data object information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "name",
                            "description": "The transfer data object name.\n  If there is no name based on the Blob given, the name would be the transfer ID.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "transferId"
                        },
                        {
                            "name": "size",
                            "description": "The transfer data size.",
                            "type": "Number"
                        },
                        {
                            "name": "transferId",
                            "description": "The data transfer ID.",
                            "type": "String"
                        },
                        {
                            "name": "dataType",
                            "description": "The type of data transfer initiated.\n  Available types are <code>\"dataURL\"</code> and <code>\"blob\"</code>.",
                            "type": "String"
                        },
                        {
                            "name": "timeout",
                            "description": "The waiting timeout in seconds that the DataChannel\n  connection data transfer should wait before throwing an exception and terminating the data transfer.",
                            "type": "String"
                        },
                        {
                            "name": "isPrivate",
                            "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "listOfPeers",
                    "description": "The array of targeted PeerConnections to transfer the\n  data object to.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The callback fired after all the data transfers is completed\n  successfully or met with an exception. The callback signature is <code>function (error, success)</code>.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object received in the callback.\n  If received as <code>null</code>, it means that there is no errors.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "state",
                                    "description": "<i>Deprecated</i>. The\n  {{#crossLink \"Skylink/dataTransferState:event\"}}dataTransferState{{/crossLink}}\n  when the error has occurred. This only triggers for a single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "error",
                                    "description": "<i>Deprecated</i>. The error received when the\n  data transfer fails. This only triggers for single targeted PeerConnection data transfer.",
                                    "type": "Object|String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "transferId",
                                    "description": "The transfer ID of the failed data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "peerId",
                                    "description": "The single targeted PeerConnection ID for the data transfer.\n  This only triggers for single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of PeerConnection that the data transfer has been\n  initiated with.",
                                    "type": "Array"
                                },
                                {
                                    "name": "isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "transferErrors",
                                    "description": "The list of errors occurred based on per PeerConnection\n  basis.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferErrors.(#peerId)",
                                    "description": "The error that occurred when having\n  a DataChannel connection data transfer with associated PeerConnection.",
                                    "type": "Object|String"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The transfer data object information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferInfo.name",
                                    "description": "The transfer data object name.\n  If there is no name based on the Blob given, the name would be the transfer ID.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "transferId"
                                },
                                {
                                    "name": "transferInfo.size",
                                    "description": "The transfer data size.",
                                    "type": "Number"
                                },
                                {
                                    "name": "transferInfo.transferId",
                                    "description": "The data transfer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.dataType",
                                    "description": "The type of data transfer initiated.\n  The received type would be <code>\"blob\"</code>.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.timeout",
                                    "description": "The waiting timeout in seconds that the DataChannel\n  connection data transfer should wait before throwing an exception and terminating the data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "success",
                            "description": "The success object received in the callback.\n  If received as <code>null</code>, it means that there are errors.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "state",
                                    "description": "<i>Deprecated</i>. The\n  {{#crossLink \"Skylink/dataTransferState:event\"}}dataTransferState{{/crossLink}}\n  when the data transfer has been completed successfully.\n  This only triggers for a single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "transferId",
                                    "description": "The transfer ID of the successful data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "peerId",
                                    "description": "The single targeted PeerConnection ID for the data transfer.\n  This only triggers for single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of PeerConnection that the data transfer has been\n  initiated with.",
                                    "type": "Array"
                                },
                                {
                                    "name": "isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The transfer data object information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferInfo.name",
                                    "description": "The transfer data object name.\n  If there is no name based on the Blob given, the name would be the transfer ID.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "transferId"
                                },
                                {
                                    "name": "transferInfo.size",
                                    "description": "The transfer data size.",
                                    "type": "Number"
                                },
                                {
                                    "name": "transferInfo.transferId",
                                    "description": "The data transfer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.dataType",
                                    "description": "The type of data transfer initiated.\n  The received type would be <code>\"blob\"</code>.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.timeout",
                                    "description": "The waiting timeout in seconds that the DataChannel\n  connection data transfer should wait before throwing an exception and terminating the data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                }
                            ]
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "DataTransfer",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1738,
            "description": "Responds to a data transfer request by rejecting or accepting\n  the data transfer request initiated by a PeerConnection.",
            "itemtype": "method",
            "name": "respondBlobRequest",
            "params": [
                {
                    "name": "peerId",
                    "description": "The sender PeerConnection ID.",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "The data transfer ID of the data transfer request\n  to accept or reject.",
                    "type": "String"
                },
                {
                    "name": "accept",
                    "description": "The flag that indicates <code>true</code> as a response\n  to accept the data transfer and <code>false</code> as a response to reject the\n  data transfer request.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "dataTransferState",
            "component": "DataTransfer",
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"Skylink/acceptDataTransfer:method\"}}acceptDataTransfer(){{/crossLink}}",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1755,
            "description": "Responds to a data transfer request by rejecting or accepting\n  the data transfer request initiated by a PeerConnection.",
            "itemtype": "method",
            "name": "acceptDataTransfer",
            "params": [
                {
                    "name": "peerId",
                    "description": "The sender PeerConnection ID.",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "The data transfer ID of the data transfer request\n  to accept or reject.",
                    "type": "String"
                },
                {
                    "name": "accept",
                    "description": "The flag that indicates <code>true</code> as a response\n  to accept the data transfer and <code>false</code> as a response to reject the\n  data transfer request.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "dataTransferState",
            "component": "DataTransfer",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1840,
            "description": "Terminates an ongoing DataChannel connection data transfer.",
            "itemtype": "method",
            "name": "cancelBlobTransfer",
            "params": [
                {
                    "name": "peerId",
                    "description": "The PeerConnection ID associated with the data transfer.",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "The data transfer ID of the data transfer request\n  to terminate the request.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "component": "DataTransfer",
            "deprecated": true,
            "deprecationMessage": "Use {{#crossLink \"Skylink/cancelDataTransfer:method\"}}cancelDataTransfer(){{/crossLink}}",
            "since": "0.5.7",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1853,
            "description": "Terminates an ongoing DataChannel connection data transfer.",
            "itemtype": "method",
            "name": "cancelDataTransfer",
            "params": [
                {
                    "name": "peerId",
                    "description": "The PeerConnection ID associated with the data transfer.",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "The data transfer ID of the data transfer request\n  to terminate the request.",
                    "type": "String"
                }
            ],
            "trigger": "dataTransferState",
            "component": "DataTransfer",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 1939,
            "description": "Send a message object or string using the DataChannel connection\n  associated with the list of targeted PeerConnections.\nThe maximum size for the message object would be<code>16Kb</code>.\nTo send a string length longer than <code>16kb</code>, please considered\n  to use {{#crossLink \"Skylink/sendURLData:method\"}}sendURLData{{/crossLink}}\n  to send longer strings (for that instance base64 binary strings are long).",
            "itemtype": "method",
            "name": "sendP2PMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message object.",
                    "type": "String|JSON"
                },
                {
                    "name": "targetPeerId",
                    "description": "The array of targeted PeerConnections to\n  transfer the message object to. Alternatively, you may provide this parameter\n  as a string to a specific targeted PeerConnection to transfer the message object.",
                    "type": "String|Array",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Send to all peers\n  SkylinkDemo.sendP2PMessage(\"Hi there! This is from a DataChannel connection!\"\");\n\n  // Example 2: Send to specific peer\n  SkylinkDemo.sendP2PMessage(\"Hi there peer! This is from a DataChannel connection!\", targetPeerId);"
            ],
            "trigger": "incomingMessage",
            "since": "0.5.5",
            "component": "DataTransfer",
            "class": "Skylink"
        },
        {
            "file": "source/data-transfer.js",
            "line": 2032,
            "description": "Starts a [dataURL](https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n  /readAsDataURL) data transfer with PeerConnections using the DataChannel connection.\nThe receiving PeerConnections have the option to accept or reject the data transfer.",
            "itemtype": "method",
            "name": "sendURLData",
            "params": [
                {
                    "name": "data",
                    "description": "The dataURL (base64 binary string) string to transfer to PeerConnections.",
                    "type": "String"
                },
                {
                    "name": "timeout",
                    "description": "The waiting timeout in seconds that the DataChannel connection\n  data transfer should wait before throwing an exception and terminating the data transfer.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "60"
                },
                {
                    "name": "targetPeerId",
                    "description": "The array of targeted PeerConnections to transfer the\n  data object to. Alternatively, you may provide this parameter as a string to a specific\n  targeted PeerConnection to transfer the data object.",
                    "type": "String|Array",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The callback fired after all the data transfers is completed\n  successfully or met with an exception. The callback signature is <code>function (error, success)</code>.",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "The error object received in the callback.\n  If received as <code>null</code>, it means that there is no errors.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "state",
                                    "description": "<i>Deprecated</i>. The\n  {{#crossLink \"Skylink/dataTransferState:event\"}}dataTransferState{{/crossLink}}\n  when the error has occurred. This only triggers for a single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "error",
                                    "description": "<i>Deprecated</i>. The error received when the\n  data transfer fails. This only triggers for single targeted PeerConnection data transfer.",
                                    "type": "Object|String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "transferId",
                                    "description": "The transfer ID of the failed data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "peerId",
                                    "description": "The single targeted PeerConnection ID for the data transfer.\n  This only triggers for single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of PeerConnection that the data transfer has been\n  initiated with.",
                                    "type": "Array"
                                },
                                {
                                    "name": "isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "transferErrors",
                                    "description": "The list of errors occurred based on per PeerConnection\n  basis.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferErrors.(#peerId)",
                                    "description": "The error that occurred when having\n  a DataChannel connection data transfer with associated PeerConnection.",
                                    "type": "Object|String"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The transfer data object information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferInfo.name",
                                    "description": "The data transfer ID.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "transferId"
                                },
                                {
                                    "name": "transferInfo.size",
                                    "description": "The transfer data size.",
                                    "type": "Number"
                                },
                                {
                                    "name": "transferInfo.transferId",
                                    "description": "The data transfer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.dataType",
                                    "description": "The type of data transfer initiated.\n  The received type would be <code>\"dataURL\"</code>.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.timeout",
                                    "description": "The waiting timeout in seconds that the DataChannel\n  connection data transfer should wait before throwing an exception and terminating the data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "success",
                            "description": "The success object received in the callback.\n  If received as <code>null</code>, it means that there are errors.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "state",
                                    "description": "<i>Deprecated</i>. The\n  {{#crossLink \"Skylink/dataTransferState:event\"}}dataTransferState{{/crossLink}}\n  when the data transfer has been completed successfully.\n  This only triggers for a single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "transferId",
                                    "description": "The transfer ID of the successful data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "peerId",
                                    "description": "The single targeted PeerConnection ID for the data transfer.\n  This only triggers for single targeted PeerConnection data transfer.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "null"
                                },
                                {
                                    "name": "listOfPeers",
                                    "description": "The list of PeerConnection that the data transfer has been\n  initiated with.",
                                    "type": "Array"
                                },
                                {
                                    "name": "isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "transferInfo",
                                    "description": "The transfer data object information.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "transferInfo.name",
                                    "description": "The data transfer ID.",
                                    "type": "String",
                                    "optional": true,
                                    "optdefault": "transferId"
                                },
                                {
                                    "name": "transferInfo.size",
                                    "description": "The transfer data size.",
                                    "type": "Number"
                                },
                                {
                                    "name": "transferInfo.transferId",
                                    "description": "The data transfer ID.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.dataType",
                                    "description": "The type of data transfer initiated.\n  The received type would be <code>\"dataURL\"</code>.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.timeout",
                                    "description": "The waiting timeout in seconds that the DataChannel\n  connection data transfer should wait before throwing an exception and terminating the data transfer.",
                                    "type": "String"
                                },
                                {
                                    "name": "transferInfo.isPrivate",
                                    "description": "The flag to indicate if the data transfer is a private\n  transfer to the PeerConnection directly and not broadcasted to all PeerConnections.",
                                    "type": "Boolean"
                                }
                            ]
                        }
                    ]
                }
            ],
            "example": [
                "\n\n  // Example 1: Send dataURL to all peers connected\n  SkylinkDemo.sendURLData(dataURL, 67);\n\n  // Example 2: Send dataURL to individual peer\n  SkylinkDemo.sendURLData(dataURL, 87, targetPeerId);\n\n  // Example 3: Send dataURL with callback\n  SkylinkDemo.sendURLData(dataURL, 87, function(error, success){\n    if (error){\n      console.error(\"Error happened. Could not send dataURL\", error);\n    }\n    else{\n      console.info(\"Successfully sent dataURL\");\n    }\n  });"
            ],
            "trigger": "dataTransferState",
            "since": "0.6.1",
            "component": "DataTransfer",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 1,
            "description": "Stores the list of buffered ICE candidates received\n  before <code>RTCPeerConnection.setRemoteDescription</code> is\n  called. Adding ICE candidates before receiving the remote\n  session description causes an ICE connection failures in a\n  number of instances.",
            "itemtype": "attribute",
            "name": "_peerCandidatesQueue",
            "params": [
                {
                    "name": "(#peerId)",
                    "description": "The list of buffered ICE candidates\n  associated with the PeerConnection.",
                    "type": "Array"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.1",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 19,
            "description": "Stores the list of flags associated to the PeerConnections\n  to disable trickle ICE as attempting to establish an\n  ICE connection failed after many trickle ICE connection\n  attempts. To ensure the stability and increase the chances\n  of a successful ICE connection, track the PeerConnection and store\n  it as a flag in this list to disable trickling of ICE connections.",
            "itemtype": "attribute",
            "name": "_peerIceTrickleDisabled",
            "params": [
                {
                    "name": "(#peerId)",
                    "description": "The PeerConnection ICE trickle disabled flag.",
                    "type": "Boolean"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.8",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 37,
            "description": "The list of PeerConnection ICE candidate generation triggered states.\nRefer to [w3c WebRTC Specification Draft](http://www.w3.org/TR/webrtc/\n  #idl-def-RTCIceGatheringState).",
            "itemtype": "attribute",
            "name": "CANDIDATE_GENERATION_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "NEW",
                    "description": "The object was just created, and no networking\n  has occurred yet.",
                    "type": "String"
                },
                {
                    "name": "GATHERING",
                    "description": "The ICE engine is in the process of gathering\n  candidates for connection.",
                    "type": "String"
                },
                {
                    "name": "COMPLETED",
                    "description": "The ICE engine has completed gathering. Events\n  such as adding a new interface or a new TURN server will cause the\n  state to go back to gathering.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.4.1",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 61,
            "description": "Handles the ICE candidate object received from associated PeerConnection\n  to send the ICE candidate object or wait for all gathering to complete\n  before sending the candidate to prevent trickle ICE.",
            "itemtype": "method",
            "name": "_onIceCandidate",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The PeerConnection ID associated with the ICE\n  candidate object received.",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "The event object received in the <code>RTCPeerConnection.\n  onicecandidate</code> to parse the ICE candidate and determine\n  if gathering has completed.",
                    "type": "Event"
                }
            ],
            "trigger": "candidateGenerationState",
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 114,
            "description": "Buffers an ICE candidate object associated with a PeerConnection\n  to prevent disruption to ICE connection when ICE candidate\n  is received before <code>RTCPeerConnection.setRemoteDescription</code>\n  is called.",
            "itemtype": "method",
            "name": "_addIceCandidateToQueue",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The PeerConnection associated with the ICE\n  candidate object.",
                    "type": "String"
                },
                {
                    "name": "candidate",
                    "description": "The constructed ICE candidate object.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 136,
            "description": "Handles the event when adding an ICE candidate has been added\n  successfully. This is mainly to prevent JShint errors.",
            "itemtype": "method",
            "name": "_onAddIceCandidateSuccess",
            "access": "private",
            "tagname": "",
            "since": "0.5.9",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 149,
            "description": "Handles the event when adding an ICE candidate has failed.\nThis is mainly to prevent JShint errors.",
            "itemtype": "method",
            "name": "_onAddIceCandidateFailure",
            "params": [
                {
                    "name": "error",
                    "description": "The error received in the failure callback\n  in <code>RTCPeerConnection.addIceCandidate(candidate, successCb, failureCb)</code>.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.9",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-candidate.js",
            "line": 164,
            "description": "Adds the list of ICE candidates bufferred before <code>RTCPeerConnection.setRemoteDescription\n  </code> is called associated with the PeerConnection.",
            "itemtype": "method",
            "name": "_addIceCandidateFromQueue",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The PeerConnection ID to add the associated bufferred\n  ICE candidates.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.5.2",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 1,
            "description": "The list of PeerConnection ICE connection triggered states.\nRefer to [w3c WebRTC Specification Draft](http://www.w3.org/TR/webrtc/\n  #idl-def-RTCIceConnectionState).",
            "itemtype": "attribute",
            "name": "ICE_CONNECTION_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "STARTING",
                    "description": "The ICE agent is gathering addresses\n  and/or waiting for remote candidates to be supplied.",
                    "type": "String"
                },
                {
                    "name": "CHECKING",
                    "description": "The ICE agent has received remote candidates\n  on at least one component, and is checking candidate pairs but has\n  not yet found a connection. In addition to checking, it may also\n  still be gathering.",
                    "type": "String"
                },
                {
                    "name": "CONNECTED",
                    "description": "The ICE agent has found a usable connection\n  for all components but is still checking other candidate pairs to see\n  if there is a better connection. It may also still be gathering.",
                    "type": "String"
                },
                {
                    "name": "COMPLETED",
                    "description": "The ICE agent has finished gathering and\n  checking and found a connection for all components.",
                    "type": "String"
                },
                {
                    "name": "FAILED",
                    "description": "The ICE agent is finished checking all\n  candidate pairs and failed to find a connection for at least one\n  component.",
                    "type": "String"
                },
                {
                    "name": "DISCONNECTED",
                    "description": "Liveness checks have failed for one or\n  more components. This is more aggressive than \"failed\", and may\n  trigger intermittently (and resolve itself without action) on\n  a flaky network.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The ICE agent has shut down and is no\n  longer responding to STUN requests.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.1.0",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 43,
            "description": "The list of TURN server transports flags to set\n for TURN server connections.",
            "itemtype": "attribute",
            "name": "TURN_TRANSPORT",
            "type": "JSON",
            "params": [
                {
                    "name": "TCP",
                    "description": "Use only TCP transport option.\n  <i>E.g. <code>turn:turnurl:5523?transport=tcp</code></i>.",
                    "type": "String"
                },
                {
                    "name": "UDP",
                    "description": "Use only UDP transport option.\n  <i>E.g. <code>turn:turnurl:5523?transport=udp</code></i>.",
                    "type": "String"
                },
                {
                    "name": "ANY",
                    "description": "Use both TCP and UDP transport option.\n  <i>E.g. <code>turn:turnurl:5523?transport=udp</code> and\n  <code>turn:turnurl:5523?transport=tcp</code></i>.",
                    "type": "String"
                },
                {
                    "name": "NONE",
                    "description": "Set no transport option in TURN servers.\n  <i>E.g. <code>turn:turnurl:5523/code></i>",
                    "type": "String"
                }
            ],
            "readonly": "",
            "since": "0.5.4",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 69,
            "description": "The flag that indicates if PeerConnections should enable\n   trickling of ICE to connect the ICE connection.",
            "itemtype": "attribute",
            "name": "_enableIceTrickle",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.3.0",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 83,
            "description": "The flag that indicates if PeerConnections ICE gathering\n  should use STUN server connection.",
            "itemtype": "attribute",
            "name": "_enableSTUN",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "ICE",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 96,
            "description": "The flag that indicates if PeerConnections ICE gathering\n  should use TURN server connection.\nTampering this flag may disable any successful PeerConnection\n  that is behind any firewalls.",
            "itemtype": "attribute",
            "name": "_enableTURN",
            "type": "Boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "ICE",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 117,
            "description": "The TURN server flag to enable for TURN server connections.\n[Rel: Skylink.TURN_TRANSPORT]",
            "itemtype": "attribute",
            "name": "_TURNTransport",
            "type": "String",
            "default": "Skylink.TURN_TRANSPORT.ANY",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.4",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 131,
            "description": "Stores the list of PeerConnection ICE connection failures.\nAfter an third attempt of ICE connection failure, the\n  trickling of ICE would be disabled.",
            "itemtype": "attribute",
            "name": "_ICEConnectionFailures",
            "params": [
                {
                    "name": "(#peerId)",
                    "description": "The PeerConnection ICE connection\n  attempt failures.",
                    "type": "Number"
                }
            ],
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Peer",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 147,
            "description": "Reconfigures the <code>RTCConfiguration.iceServers</code> that is\n  to be passed in constructing the new <code>RTCPeerConnection</code>\n  object specifically for Firefox STUN connection.",
            "itemtype": "method",
            "name": "_setFirefoxIceServers",
            "params": [
                {
                    "name": "config",
                    "description": "The RTCConfiguration that is to be passed for\n  constructing the new RTCPeerConnection object.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "The updated RTCConfiguration object with Firefox\n  specific STUN configuration.",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.1.0",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/ice-connection.js",
            "line": 192,
            "description": "Reconfigures the <code>RTCConfiguration.iceServers</code> that is\n  to be passed in constructing the new <code>RTCPeerConnection</code>\n  object to remove (disable) STUN or remove TURN (disable) server\n  connections based on the\n  {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}}\n  configuration passed in.",
            "itemtype": "method",
            "name": "_setIceServers",
            "params": [
                {
                    "name": "config",
                    "description": "The RTCConfiguration that is to be passed for\n  constructing the new RTCPeerConnection object.",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "The updated RTCConfiguration object based on the\n  configuration settings in the\n  {{#crossLink \"Skylink/init:method\"}}init(){{/crossLink}}\n  method.",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "component": "ICE",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 1,
            "description": "The list of Skylink PeerConnection signaling triggered states.\nRefer to [w3c WebRTC Specification Draft](http://www.w3.org/TR/webrtc/\n  #idl-def-RTCSignalingState).",
            "itemtype": "attribute",
            "name": "PEER_CONNECTION_STATE",
            "type": "JSON",
            "params": [
                {
                    "name": "STABLE",
                    "description": "There is no handshaking in progress. This state occurs\n  when handshaking has just started or close.",
                    "type": "String"
                },
                {
                    "name": "HAVE_LOCAL_OFFER",
                    "description": "The session description \"offer\" is generated\n  and to be sent.",
                    "type": "String"
                },
                {
                    "name": "HAVE_REMOTE_OFFER",
                    "description": "The session description \"offer\" is received.\n  The handshaking has been completed.",
                    "type": "String"
                },
                {
                    "name": "CLOSED",
                    "description": "The connection is closed.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Peer",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 26,
            "description": "The types of Skylink server PeerConnections that serves different functionalities.",
            "type": "JSON",
            "itemtype": "attribute",
            "name": "SERVER_PEER_TYPE",
            "params": [
                {
                    "name": "MCU",
                    "description": "The MCU server PeerConnection.",
                    "type": "String"
                },
                {
                    "name": "SIP",
                    "description": "The SIP server PeerConnection.\n  This server PeerConnection is only available after MCU PeerConnection\n  is connected.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Peer",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 44,
            "description": "Stores the timestamp of the moment when the last PeerConnections\n  restarts has happened. Used for the restart PeerConnection functionality.",
            "itemtype": "attribute",
            "name": "_lastRestart",
            "type": "Object",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.9",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 57,
            "description": "Stores the counter of the number of consecutive\n  PeerConnections restarts retries.",
            "itemtype": "attribute",
            "name": "_retryCount",
            "type": "Number",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 70,
            "description": "Stores the list of PeerConnections.",
            "itemtype": "attribute",
            "name": "_peerConnections",
            "type": "Object",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 82,
            "description": "Stores the list of PeerConnection restart weights received\n  that would be compared against to indicate if PeerConnection\n  should initiates a restart from the other connection end should.\nThe one that sends restart later is the one who initiates the restart.",
            "itemtype": "attribute",
            "name": "_peerRestartPriorities",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 96,
            "description": "Connects to the PeerConnection associated to the ID provided.",
            "itemtype": "method",
            "name": "_addPeer",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The PeerConnection ID to connect to.",
                    "type": "String"
                },
                {
                    "name": "peerBrowser",
                    "description": "The PeerConnection platform agent information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "agent",
                            "description": "The PeerConnection platform browser or agent name.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The PeerConnection platform browser or agent version.",
                            "type": "Number"
                        },
                        {
                            "name": "os",
                            "description": "The PeerConnection platform name.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "toOffer",
                    "description": "The flag that indicates if the PeerConnection connection\n  should be start connection as an offerer or as an answerer.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "restartConn",
                    "description": "The flag that indicates if the PeerConnection\n  connection is part of restart functionality use-case.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "receiveOnly",
                    "description": "The flag that indicates if the PeerConnection\n  connection should send Stream or not (receive only).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "isSS",
                    "description": "The flag that indicates if the PeerConnection\n  connection Stream object sent is a screensharing stream or not.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 160,
            "description": "Restarts a PeerConnection connection.\nThis is usually done for replacing the previous Stream object and restarting\n  the connection with a new one, or when the ICE connection has issues\n  streaming video/audio stream in the remote Stream object which requires\n  a refresh in the ICE connection.",
            "itemtype": "method",
            "name": "_restartPeerConnection",
            "params": [
                {
                    "name": "peerId",
                    "description": "The PeerConnection ID to restart the connection with.",
                    "type": "String"
                },
                {
                    "name": "isSelfInitiatedRestart",
                    "description": "The flag that indicates if the restart action\n   was caused by self.",
                    "type": "Boolean"
                },
                {
                    "name": "isConnectionRestart",
                    "description": "The flag that indicates whether the restarting action\n  is caused by connectivity issues.",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the PeerConnection connection has\n  been succesfully initiated with a restart.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "explict",
                    "description": "The flag that indicates whether the restart functionality\n  requires a clean restart of making sure all connections is closed before PeerConnection\n  starts reconnecting again.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 293,
            "description": "Disconnects the PeerConnection and remove object references\n  associated to the ID provided",
            "itemtype": "method",
            "name": "_removePeer",
            "params": [
                {
                    "name": "peerId",
                    "description": "The PeerConnection ID to disconnect\n  the connection with.",
                    "type": "String"
                }
            ],
            "trigger": "peerLeft",
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 353,
            "description": "Creates a PeerConnection connection. This does not start the handshake connection\n  but creates the PeerConnection connection object ready for connection.",
            "itemtype": "method",
            "name": "_createPeerConnection",
            "params": [
                {
                    "name": "targetMid",
                    "description": "The PeerConnection ID to create the PeerConnection object\n  with.",
                    "type": "String"
                },
                {
                    "name": "isScreenSharing",
                    "description": "The flag that indicates if the PeerConnection\n  connection Stream object sent is a screensharing stream or not.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "The PeerConnection connection object associated with\n  the provided ID.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 470,
            "description": "// resend if failed\nif (iceConnectionState === self.ICE_CONNECTION_STATE.FAILED) {\n  log.debug([targetMid, 'RTCIceConnectionState', null,\n    'Ice connection state failed. Re-negotiating connection']);\n  self._removePeer(targetMid);\n  self._sendChannelMessage({\n    type: self._SIG_MESSAGE_TYPE.WELCOME,\n    mid: self._user.sid,\n    rid: self._room.id,\n    agent: window.webrtcDetectedBrowser,\n    version: window.webrtcDetectedVersion,\n    userInfo: self.getPeerInfo(),\n    target: targetMid,\n    restartNego: true,\n    hsPriority: -1\n  });",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 518,
            "description": "Refreshes a PeerConnection connection.\nThis feature can be used to refresh a PeerConnection when the\n  remote Stream object received does not stream any audio/video stream.\nIf there are more than 1 refresh during 5 seconds\n  or refresh is less than 3 seconds since the last refresh\n  initiated by the other peer, it will be aborted.",
            "itemtype": "method",
            "name": "refreshConnection",
            "params": [
                {
                    "name": "targetPeerId",
                    "description": "The array of targeted PeerConnections to refresh\n  the connection with.",
                    "type": "String|Array",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "The callback fired after all targeted PeerConnections has\n  been initiated with refresh or have met with an exception.\n  The callback signature is <code>function (error, success)</code>.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  SkylinkDemo.on(\"iceConnectionState\", function (state, peerId)) {\n    if (iceConnectionState === SkylinkDemo.ICE_CONNECTION_STATE.FAILED) {\n      // Do a refresh\n      SkylinkDemo.refreshConnection(peerId);\n    }\n  });"
            ],
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-connection.js",
            "line": 662,
            "description": "Equivalent to _restartPeerConnection but with MCU enabled.\nMakes the peer (self) leave the room and rejoin",
            "itemtype": "method",
            "name": "_restartMCUConnection",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback once restart peer connection\n  with MCU is completed.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 1,
            "description": "Stores the User information.",
            "itemtype": "attribute",
            "name": "_peerInformations",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Peer",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 13,
            "description": "Stores the User information, credential and the local stream(s).",
            "itemtype": "attribute",
            "name": "_user",
            "type": "JSON",
            "params": [
                {
                    "name": "uid",
                    "description": "The user's session id.",
                    "type": "String"
                },
                {
                    "name": "sid",
                    "description": "The user's secret id. This is the id used as the peerId.",
                    "type": "String"
                },
                {
                    "name": "timestamp",
                    "description": "The user's timestamp.",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "The user's access token.",
                    "type": "String"
                }
            ],
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "User",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 29,
            "description": "User's custom data set.",
            "itemtype": "attribute",
            "name": "_userData",
            "type": "JSON|String",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "User",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 41,
            "description": "Update/Set the User custom data. This Data can be a simple string or a JSON data.\nIt is let to user choice to decide how this information must be handled.\nThe Skylink demos provided use this parameter as a string for displaying user name.\n- Please note that the custom data would be totally overwritten.\n- If you want to modify only some data, please call\n  {{#crossLink \"Skylink/getUserData:method\"}}getUserData(){{/crossLink}}\n  and then modify the information you want individually.\n- {{#crossLink \"Skylink/peerUpdated:event\"}}peerUpdated{{/crossLink}}\n  event fires only if <b>setUserData()</b> is called after\n  joining a room.",
            "itemtype": "method",
            "name": "setUserData",
            "params": [
                {
                    "name": "userData",
                    "description": "User custom data.",
                    "type": "JSON|String"
                }
            ],
            "example": [
                "\n  // Example 1: Intial way of setting data before user joins the room\n  SkylinkDemo.setUserData({\n    displayName: 'Bobby Rays',\n    fbUserId: '1234'\n  });\n\n // Example 2: Way of setting data after user joins the room\n  var userData = SkylinkDemo.getUserData();\n  userData.displayName = 'New Name';\n  userData.fbUserId = '1234';\n  SkylinkDemo.setUserData(userData);"
            ],
            "trigger": "peerUpdated",
            "component": "User",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 90,
            "description": "Gets the User custom data.\nSee {{#crossLink \"Skylink/setUserData:method\"}}setUserData(){{/crossLink}}\n  for more information",
            "itemtype": "method",
            "name": "getUserData",
            "return": {
                "description": "User custom data.",
                "type": "JSON|String"
            },
            "example": [
                "\n  // Example 1: To get other peer's userData\n  var peerData = SkylinkDemo.getUserData(peerId);\n\n  // Example 2: To get own userData\n  var userData = SkylinkDemo.getUserData();"
            ],
            "component": "User",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 120,
            "description": "Gets the Peer information (media settings,media status and personnal data set by the peer).",
            "itemtype": "method",
            "name": "_parseUserData",
            "params": [
                {
                    "name": "userData",
                    "description": "User custom data.",
                    "type": "JSON",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "User",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/peer-data.js",
            "line": 135,
            "description": "Gets the Peer information.\n- If there is no information related to the peer, <code>null</code> would be returned.",
            "itemtype": "method",
            "name": "getPeerInfo",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer retrieve we want to retrieve the information.\n   Leave this blank to return the User information.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Peer information. Please reference\n  {{#crossLink \"Skylink/peerJoined:event\"}}peerJoined{{/crossLink}}\n  <code>peerInfo</code> parameter.",
                "type": "JSON"
            },
            "example": [
                "\n  // Example 1: To get other peer's information\n  var peerInfo = SkylinkDemo.getPeerInfo(peerId);\n\n  // Example 2: To get own information\n  var userInfo = SkylinkDemo.getPeerInfo();"
            ],
            "component": "Peer",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 1,
            "description": "The list of handshake progress steps that would be triggered.",
            "type": "JSON",
            "itemtype": "attribute",
            "name": "HANDSHAKE_PROGRESS",
            "params": [
                {
                    "name": "ENTER",
                    "description": "Step 1. Received \"enter\" from peer.",
                    "type": "String"
                },
                {
                    "name": "WELCOME",
                    "description": "Step 2. Received \"welcome\" from peer.",
                    "type": "String"
                },
                {
                    "name": "OFFER",
                    "description": "Step 3. Received \"offer\" from peer.",
                    "type": "String"
                },
                {
                    "name": "ANSWER",
                    "description": "Step 4. Received \"answer\" from peer.",
                    "type": "String"
                },
                {
                    "name": "ERROR",
                    "description": "Error state.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Peer",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 23,
            "description": "Stores the list of <code>setTimeout</code> awaiting for successful connection.",
            "itemtype": "attribute",
            "name": "_peerConnectionHealthTimers",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 35,
            "description": "Stores the list of stable Peer connection.",
            "itemtype": "attribute",
            "name": "_peerConnectionHealth",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 46,
            "description": "Stores the list of handshaking weights received that would be compared against\nto indicate if User should send an \"offer\" or Peer should.",
            "itemtype": "attribute",
            "name": "_peerHSPriorities",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 58,
            "description": "Creates an offer to Peer to initate Peer connection.",
            "itemtype": "method",
            "name": "_doOffer",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer to send offer to.",
                    "type": "String"
                },
                {
                    "name": "peerBrowser",
                    "description": "The peer browser information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "agent",
                            "description": "The peer browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The peer browser version.",
                            "type": "Number"
                        },
                        {
                            "name": "os",
                            "description": "The peer browser operating system.",
                            "type": "Number"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 144,
            "description": "Creates an answer to Peer as a response to Peer's offer.",
            "itemtype": "method",
            "name": "_doAnswer",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer to send answer to.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 174,
            "description": "Starts a Peer connection health check.\nThe health timers waits for connection, and within 1m if there is not connection,\nit attempts a reconnection.",
            "itemtype": "method",
            "name": "_startPeerConnectionHealthCheck",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to set a connection timeout if connection failed.",
                    "type": "String"
                },
                {
                    "name": "toOffer",
                    "description": "The flag to check if peer is offerer. If the peer is offerer,\n  the restart check should be increased.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 231,
            "description": "Stops a Peer connection health check.",
            "itemtype": "method",
            "name": "_stopPeerConnectionHealthCheck",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to clear the checking.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/peer-handshake.js",
            "line": 256,
            "description": "Sets a generated session description and sends to Peer.",
            "itemtype": "method",
            "name": "_setLocalAndSendMessage",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer to send offer/answer to.",
                    "type": "String"
                },
                {
                    "name": "sessionDescription",
                    "description": "This should be provided by the peerconnection API.\n  User might 'tamper' with it, but then , the setLocal may fail.",
                    "type": "JSON"
                }
            ],
            "trigger": "handshakeProgress",
            "access": "private",
            "tagname": "",
            "component": "Peer",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 1,
            "description": "The list of signaling warnings that would be received.",
            "itemtype": "attribute",
            "name": "SYSTEM_ACTION",
            "type": "JSON",
            "params": [
                {
                    "name": "WARNING",
                    "description": "Server warning to User if actions are not\n  taken, User would be kicked out of the Room.",
                    "type": "String"
                },
                {
                    "name": "REJECT",
                    "description": "Server has kicked User out of the Room.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 18,
            "description": "The list of signaling actions to be taken upon received.",
            "itemtype": "attribute",
            "name": "SYSTEM_ACTION_REASON",
            "type": "JSON",
            "params": [
                {
                    "name": "FAST_MESSAGE",
                    "description": "User is not alowed to\n  send too quick messages as it is used to prevent jam.",
                    "type": "String"
                },
                {
                    "name": "ROOM_LOCKED",
                    "description": "Room is locked and User is rejected from joining the Room.",
                    "type": "String"
                },
                {
                    "name": "ROOM_FULL",
                    "description": "The target Peers in a persistent room is full.",
                    "type": "String"
                },
                {
                    "name": "DUPLICATED_LOGIN",
                    "description": "The User is re-attempting to connect again with\n  an userId that has been used.",
                    "type": "String"
                },
                {
                    "name": "SERVER_ERROR",
                    "description": "Server has an error.",
                    "type": "String"
                },
                {
                    "name": "VERIFICATION",
                    "description": "Verification is incomplete for roomId provided.",
                    "type": "String"
                },
                {
                    "name": "EXPIRED",
                    "description": "Persistent meeting. Room has\n  expired and user is unable to join the room.",
                    "type": "String"
                },
                {
                    "name": "ROOM_CLOSED",
                    "description": "The persistent room is closed as it has been expired.",
                    "type": "String"
                },
                {
                    "name": "ROOM_CLOSING",
                    "description": "The persistent room is closing.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 51,
            "description": "The room that the user is currently connected to.",
            "itemtype": "attribute",
            "name": "_selectedRoom",
            "type": "String",
            "default": "Skylink._defaultRoom",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 63,
            "description": "The flag that indicates whether room is currently locked.",
            "itemtype": "attribute",
            "name": "_roomLocked",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 74,
            "description": "Connects the User to a Room.",
            "itemtype": "method",
            "name": "joinRoom",
            "params": [
                {
                    "name": "room",
                    "description": "Room name to join.\n  If Room name is not provided, User would join the default room.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "init.options.defaultRoom"
                },
                {
                    "name": "options",
                    "description": "Media Constraints",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "User custom data. See\n{{#crossLink \"Skylink/setUserData:method\"}}setUserData(){{/crossLink}}\n  for more information",
                            "type": "JSON|String",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "Enable audio stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "Enable video stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream frameRate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "bandwidth",
                            "description": "Stream bandwidth settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Audio stream bandwidth in kbps.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "50"
                                },
                                {
                                    "name": "video",
                                    "description": "Video stream bandwidth in kbps.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "256"
                                },
                                {
                                    "name": "data",
                                    "description": "Data stream bandwidth in kbps.",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "1638400"
                                }
                            ]
                        },
                        {
                            "name": "manualGetUserMedia",
                            "description": "Get the user media manually.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after peer leaves the room.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // To just join the default room without any video or audio\n  // Note that calling joinRoom without any parameters\n  // still sends any available existing MediaStreams allowed.\n  // See Examples 2, 3, 4 and 5 etc to prevent video or audio stream\n  SkylinkDemo.joinRoom();\n\n  // To just join the default room with bandwidth settings\n  SkylinkDemo.joinRoom({\n    'bandwidth': {\n      'data': 14440\n    }\n  });\n\n  // Example 1: To call getUserMedia and joinRoom seperately\n  SkylinkDemo.getUserMedia();\n  SkylinkDemo.on('mediaAccessSuccess', function (stream)) {\n    attachMediaStream($('.localVideo')[0], stream);\n    SkylinkDemo.joinRoom();\n  });\n\n  // Example 2: Join a room without any video or audio\n  SkylinkDemo.joinRoom('room');\n\n  // Example 3: Join a room with audio only\n  SkylinkDemo.joinRoom('room', {\n    'audio' : true,\n    'video' : false\n  });\n\n  // Example 4: Join a room with prefixed video width and height settings\n  SkylinkDemo.joinRoom('room', {\n    'audio' : true,\n    'video' : {\n      'resolution' : {\n        'width' : 640,\n        'height' : 320\n      }\n    }\n  });\n\n  // Example 5: Join a room with userData and settings with audio, video\n  // and bandwidth\n  SkylinkDemo.joinRoom({\n    'userData': {\n      'item1': 'My custom data',\n      'item2': 'Put whatever, string or JSON or array'\n    },\n    'audio' : {\n       'stereo' : true\n     },\n    'video' : {\n       'res' : SkylinkDemo.VIDEO_RESOLUTION.VGA,\n       'frameRate' : 50\n    },\n    'bandwidth' : {\n       'audio' : 48,\n       'video' : 256,\n       'data' : 14480\n     }\n  });\n\n  //Example 6: joinRoom with callback\n  SkylinkDemo.joinRoom(function(error, success){\n    if (error){\n      console.log('Error happened. Can not join room'));\n    }\n    else{\n      console.log('Successfully joined room');\n    }\n  });"
            ],
            "trigger": "peerJoined, mediaAccessRequired",
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 342,
            "description": "Waits for room to ready, before starting the Room connection.",
            "itemtype": "method",
            "name": "_waitForOpenChannel",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "User custom data.",
                            "type": "JSON|String",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "This call requires audio stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video stream.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream maximum frameRate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "bandwidth",
                            "description": "Stream bandwidth settings.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Audio stream bandwidth in kbps.\n  Recommended: 50 kbps.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video",
                                    "description": "Video stream bandwidth in kbps.\n  Recommended: 256 kbps.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "data",
                                    "description": "Data stream bandwidth in kbps.\n  Recommended: 1638400 kbps.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback that will trigger",
                    "type": "Function",
                    "optional": true
                }
            ],
            "trigger": "peerJoined, incomingStream, mediaAccessRequired",
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 406,
            "description": "Disconnects a User from the room.",
            "itemtype": "method",
            "name": "leaveRoom",
            "params": [
                {
                    "name": "stopUserMedia",
                    "description": "The flag that indicates if leaving the room\n  should automatically stop the existing MediaStream served to skylink.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after peer leaves the room.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  //Example 1: Just leaveRoom\n  SkylinkDemo.leaveRoom();\n\n  //Example 2: leaveRoom with callback\n  SkylinkDemo.leaveRoom(function(error, success){\n    if (error){\n      console.log('Error happened'));\n    }\n    else{\n      console.log('Successfully left room');\n    }\n  });"
            ],
            "trigger": "peerLeft, channelClose, streamEnded",
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 498,
            "description": "Locks the room to prevent other Peers from joining the room.",
            "itemtype": "method",
            "name": "lockRoom",
            "example": [
                "\n  SkylinkDemo.lockRoom();"
            ],
            "trigger": "lockRoom",
            "component": "Room",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-connection.js",
            "line": 520,
            "description": "Unlocks the room to allow other Peers to join the room.",
            "itemtype": "method",
            "name": "unlockRoom",
            "example": [
                "\n  SkylinkDemo.unlockRoom();"
            ],
            "trigger": "lockRoom",
            "component": "Room",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 1,
            "description": "The list of Room initialization readyStates. This indicates if the\nrequired API information has been retrieved successfully from the API\nserver for the signaling connection.",
            "itemtype": "attribute",
            "name": "READY_STATE_CHANGE",
            "type": "JSON",
            "params": [
                {
                    "name": "INIT",
                    "description": "The initialization state.",
                    "type": "Number"
                },
                {
                    "name": "LOADING",
                    "description": "The API information is retrieving in progress.",
                    "type": "Number"
                },
                {
                    "name": "COMPLETED",
                    "description": "The API information has been retrieved.",
                    "type": "Number"
                },
                {
                    "name": "ERROR",
                    "description": "An error has occurred when retrieving API information.",
                    "type": "Number"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 23,
            "description": "The list of ready state change errors.\n- These are the error states from the error object error code.\n- <b>ROOM_LOCKED</b> is deprecated in 0.5.2. Please use\n  {{#crossLink \"Skylink/:attr\"}}leaveRoom(){{/crossLink}}\n- The states that would occur are:",
            "itemtype": "attribute",
            "name": "READY_STATE_CHANGE_ERROR",
            "type": "JSON",
            "params": [
                {
                    "name": "API_INVALID",
                    "description": "Api Key provided does not exist.",
                    "type": "Number"
                },
                {
                    "name": "API_DOMAIN_NOT_MATCH",
                    "description": "Api Key used in domain does\n  not match.",
                    "type": "Number"
                },
                {
                    "name": "API_CORS_DOMAIN_NOT_MATCH",
                    "description": "Api Key used in CORS\n  domain does not match.",
                    "type": "Number"
                },
                {
                    "name": "API_CREDENTIALS_INVALID",
                    "description": "Api Key credentials does\n  not exist.",
                    "type": "Number"
                },
                {
                    "name": "API_CREDENTIALS_NOT_MATCH",
                    "description": "Api Key credentials does not\n  match what is expected.",
                    "type": "Number"
                },
                {
                    "name": "API_INVALID_PARENT_KEY",
                    "description": "Api Key does not have a parent\n  key nor is a root key.",
                    "type": "Number"
                },
                {
                    "name": "API_NOT_ENOUGH_CREDIT",
                    "description": "Api Key does not have enough\n  credits to use.",
                    "type": "Number"
                },
                {
                    "name": "API_NOT_ENOUGH_PREPAID_CREDIT",
                    "description": "Api Key does not have\n  enough prepaid credits to use.",
                    "type": "Number"
                },
                {
                    "name": "API_FAILED_FINDING_PREPAID_CREDIT",
                    "description": "Api Key preapid\n  payments does not exist.",
                    "type": "Number"
                },
                {
                    "name": "API_NO_MEETING_RECORD_FOUND",
                    "description": "Api Key does not have a\n  meeting record at this timing. This occurs when Api Key is a\n  static one.",
                    "type": "Number"
                },
                {
                    "name": "ROOM_LOCKED",
                    "description": "Room is locked.",
                    "type": "Number"
                },
                {
                    "name": "NO_SOCKET_IO",
                    "description": "No socket.io dependency is loaded to use.",
                    "type": "Number"
                },
                {
                    "name": "NO_XMLHTTPREQUEST_SUPPORT",
                    "description": "Browser does not support\n  XMLHttpRequest to use.",
                    "type": "Number"
                },
                {
                    "name": "NO_WEBRTC_SUPPORT",
                    "description": "Browser does not have WebRTC support.",
                    "type": "Number"
                },
                {
                    "name": "NO_PATH",
                    "description": "No path is loaded yet.",
                    "type": "Number"
                },
                {
                    "name": "INVALID_XMLHTTPREQUEST_STATUS",
                    "description": "Invalid XMLHttpRequest\n  when retrieving information.",
                    "type": "Number"
                },
                {
                    "name": "ADAPTER_NO_LOADED",
                    "description": "AdapterJS dependency is not loaded.",
                    "type": "Number"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 86,
            "description": "The list of available regional servers.\n- This is for developers to set the nearest region server\n  for Skylink to connect to for faster connectivity.\n- The available regional servers are:",
            "itemtype": "attribute",
            "name": "REGIONAL_SERVER",
            "type": "JSON",
            "params": [
                {
                    "name": "APAC1",
                    "description": "Asia pacific server 1.",
                    "type": "String"
                },
                {
                    "name": "US1",
                    "description": "server 1.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Room",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 105,
            "description": "Force an SSL connection to signalling and API server.",
            "itemtype": "attribute",
            "name": "_forceSSL",
            "type": "Boolean",
            "default": "false",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 118,
            "description": "Force an SSL connection to TURN server.",
            "itemtype": "attribute",
            "name": "_forceTURNSSL",
            "type": "Boolean",
            "default": "false",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 131,
            "description": "The path that user is currently connect to.\n- NOTE ALEX: check if last char is '/'",
            "itemtype": "attribute",
            "name": "_path",
            "type": "String",
            "default": "Skylink._serverPath",
            "final": 1,
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 146,
            "description": "The regional server that Skylink connects to.",
            "itemtype": "attribute",
            "name": "_serverRegion",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 157,
            "description": "The server that user connects to to make\napi calls to.\n- The reason why users can input this value is to give\n  users the chance to connect to any of our beta servers\n  if available instead of the stable version.",
            "itemtype": "attribute",
            "name": "_roomServer",
            "type": "String",
            "default": "'//api.temasys.com.sg'",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 173,
            "description": "The API Key ID.",
            "itemtype": "attribute",
            "name": "_appKey",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 184,
            "description": "The default room that the user connects to if no room is provided in\n{{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}.",
            "itemtype": "attribute",
            "name": "_defaultRoom",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 196,
            "description": "The static room's meeting starting date and time.\n- The value is in ISO formatted string.",
            "itemtype": "attribute",
            "name": "_roomStart",
            "type": "String",
            "access": "private",
            "tagname": "",
            "optional": 1,
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 209,
            "description": "The static room's meeting duration in hours.",
            "itemtype": "attribute",
            "name": "_roomDuration",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "optional": 1,
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 221,
            "description": "The credentials required to set the start date and time\nand the duration.",
            "itemtype": "attribute",
            "name": "_roomCredentials",
            "type": "String",
            "access": "private",
            "tagname": "",
            "optional": 1,
            "component": "Room",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 234,
            "description": "The current Skylink ready state change.\n[Rel: Skylink.READY_STATE_CHANGE]",
            "itemtype": "attribute",
            "name": "_readyState",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Room",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 247,
            "description": "The received server key.",
            "itemtype": "attribute",
            "name": "_key",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 258,
            "description": "The owner's username of the appKey.",
            "itemtype": "attribute",
            "name": "_appKeyOwner",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 269,
            "description": "The room connection information.",
            "itemtype": "attribute",
            "name": "_room",
            "type": "JSON",
            "params": [
                {
                    "name": "id",
                    "description": "The roomId of the room user is connected to.",
                    "type": "String"
                },
                {
                    "name": "token",
                    "description": "The token of the room user is connected to.",
                    "type": "String"
                },
                {
                    "name": "startDateTime",
                    "description": "The startDateTime in ISO string format of the room.",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "The duration of the room.",
                    "type": "String"
                },
                {
                    "name": "connection",
                    "description": "Connection constraints and configuration.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "peerConstraints",
                            "description": "The peerconnection constraints.",
                            "type": "JSON"
                        },
                        {
                            "name": "peerConfig",
                            "description": "The peerconnection configuration.",
                            "type": "JSON"
                        },
                        {
                            "name": "offerConstraints",
                            "description": "The offer constraints.",
                            "type": "JSON"
                        },
                        {
                            "name": "sdpConstraints",
                            "description": "The sdp constraints.",
                            "type": "JSON"
                        }
                    ]
                }
            ],
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 290,
            "description": "Gets information from api server.",
            "itemtype": "method",
            "name": "_requestServerInfo",
            "params": [
                {
                    "name": "method",
                    "description": "The http method.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The url to do a rest call.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after Skylink\n  receives a response from the api server.",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "HTTP Params",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 364,
            "description": "Parse the information received from the api server.",
            "itemtype": "method",
            "name": "_parseInfo",
            "params": [
                {
                    "name": "info",
                    "description": "The parsed information from the server.",
                    "type": "JSON"
                }
            ],
            "trigger": "readyStateChange",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 437,
            "description": "Start the loading of information from the api server.",
            "itemtype": "method",
            "name": "_loadInfo",
            "trigger": "readyStateChange",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Room",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 511,
            "description": "Initialize Skylink to retrieve new connection information based on options.",
            "itemtype": "method",
            "name": "_initSelectedRoom",
            "params": [
                {
                    "name": "room",
                    "description": "The room to connect to.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "Skylink._defaultRoom"
                },
                {
                    "name": "callback",
                    "description": "The callback fired once Skylink is re-initialized.",
                    "type": "Function"
                }
            ],
            "trigger": "readyStateChange",
            "access": "private",
            "tagname": "",
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/room-init.js",
            "line": 557,
            "description": "Initialize Skylink to retrieve connection information.\nThis is the first method to invoke before using any of Skylink functionalities.\n- Credentials parsing is not usabel.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "options",
                    "description": "Connection options or Application Key ID",
                    "type": "String|JSON",
                    "props": [
                        {
                            "name": "appKey",
                            "description": "Application Key ID to identify with the Temasys\n  backend server",
                            "type": "String"
                        },
                        {
                            "name": "defaultRoom",
                            "description": "The default room to connect\n  to if there is no room provided in\n  {{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "roomServer",
                            "description": "Path to the Temasys\n  backend server. If there's no room provided, default room would be used.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "region",
                            "description": "The regional server that user\n  chooses to use. [Rel: Skylink.REGIONAL_SERVER]",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "enableIceTrickle",
                            "description": "The option to enable\n  ICE trickle or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableDataChannel",
                            "description": "The option to enable\n  enableDataChannel or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableTURNServer",
                            "description": "To enable TURN servers in ice connection.\n  Please do so at your own risk as it might disrupt the connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "enableSTUNServer",
                            "description": "To enable STUN servers in ice connection.\n  Please do so at your own risk as it might disrupt the connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "TURNServerTransport",
                            "description": "Transport\n to set the transport packet type. [Rel: Skylink.TURN_TRANSPORT]",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "Skylink.TURN_TRANSPORT.ANY"
                        },
                        {
                            "name": "credentials",
                            "description": "Credentials options for\n  setting a static meeting.",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "startDateTime",
                                    "description": "The start timing of the\n  meeting in Date ISO String",
                                    "type": "String"
                                },
                                {
                                    "name": "duration",
                                    "description": "The duration of the meeting in hours.<br>\n  E.g. <code>0.5</code> for half an hour, <code>1.4</code> for 1 hour and 24 minutes",
                                    "type": "Number"
                                },
                                {
                                    "name": "credentials",
                                    "description": "The credentials required\n  to set the timing and duration of a meeting.",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "audioFallback",
                            "description": "To allow the option to fallback to\n  audio if failed retrieving video stream.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "forceSSL",
                            "description": "To force SSL connections to the API server\n  and signaling server.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "audioCodec",
                            "description": "The preferred audio codec to use.\n  It is only used when available.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "Skylink.AUDIO_CODEC.OPUS"
                        },
                        {
                            "name": "audioCodec",
                            "description": "The preferred video codec to use.\n  It is only used when available.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "Skylink.VIDEO_CODEC.OPUS"
                        },
                        {
                            "name": "socketTimeout",
                            "description": "To set the timeout for socket to fail\n  and attempt a reconnection. The mininum value is 5000.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "20000"
                        },
                        {
                            "name": "forceTURNSSL",
                            "description": "To force SSL connections to the TURN server\n  if enabled.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the room was initialized.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Note: Default room is appKey when no room\n  // Example 1: To initalize without setting any default room.\n  SkylinkDemo.init('appKey');\n\n  // Example 2: To initialize with appKey, roomServer and defaultRoom\n  SkylinkDemo.init({\n    'appKey' : 'appKey',\n    'roomServer' : 'http://xxxx.com',\n    'defaultRoom' : 'mainHangout'\n  });\n\n  // Example 3: To initialize with credentials to set startDateTime and\n  // duration of the room\n  var hash = CryptoJS.HmacSHA1(roomname + '_' + duration + '_' +\n    (new Date()).toISOString(), token);\n  var credentials = encodeURIComponent(hash.toString(CryptoJS.enc.Base64));\n  SkylinkDemo.init({\n    'appKey' : 'appKey',\n    'roomServer' : 'http://xxxx.com',\n    'defaultRoom' : 'mainHangout'\n    'credentials' : {\n       'startDateTime' : (new Date()).toISOString(),\n       'duration' : 500,\n       'credentials' : credentials\n    }\n  });\n\n  // Example 4: To initialize with callback\n  SkylinkDemo.init('appKey',function(error,success){\n    if (error){\n      console.log('Init failed: '+JSON.stringify(error));\n    }\n    else{\n      console.log('Init succeed: '+JSON.stringify(success));\n    }\n  });"
            ],
            "trigger": "readyStateChange",
            "required": 1,
            "component": "Room",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 1,
            "description": "The log levels.\n- Order from highest to lowest is: error > warn > info > log > debug.\n- A log level displays logs of his level and higher (e.g warn level displays warn and error).",
            "itemtype": "attribute",
            "name": "LOG_LEVEL",
            "type": "JSON",
            "params": [
                {
                    "name": "DEBUG",
                    "description": "Level 5. Shows debug logs.",
                    "type": "Number"
                },
                {
                    "name": "LOG",
                    "description": "Level 4. Shows normal logs.",
                    "type": "Number"
                },
                {
                    "name": "INFO",
                    "description": "Level 3. Show informational logs related to user.",
                    "type": "Number"
                },
                {
                    "name": "WARN",
                    "description": "Level 2. Shows warnings.",
                    "type": "Number"
                },
                {
                    "name": "ERROR",
                    "description": "Level 1. Shows the errors that are thrown during\n  execution.",
                    "type": "Number"
                }
            ],
            "readonly": "",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 26,
            "description": "The log key",
            "itemtype": "attribute",
            "name": "_LOG_KEY",
            "type": "String",
            "scoped": "true",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 40,
            "description": "The list of level levels based on index.",
            "itemtype": "attribute",
            "name": "_LOG_LEVELS",
            "type": "Array",
            "required": 1,
            "scoped": "true",
            "access": "private",
            "tagname": "",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 53,
            "description": "The log level of Skylink",
            "itemtype": "attribute",
            "name": "_logLevel",
            "type": "String",
            "default": "Skylink.LOG_LEVEL.ERROR",
            "required": 1,
            "scoped": "true",
            "access": "private",
            "tagname": "",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 67,
            "description": "The current state if debugging mode is enabled.",
            "itemtype": "attribute",
            "name": "_enableDebugMode",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 81,
            "description": "The current state if debugging mode should store\nthe logs in SkylinkLogs.",
            "itemtype": "attribute",
            "name": "_enableDebugStack",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 96,
            "description": "The current state if debugging mode should\nprint the trace in every log information.",
            "itemtype": "attribute",
            "name": "_enableDebugTrace",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 111,
            "description": "An internal array of logs.",
            "itemtype": "attribute",
            "name": "_storedLogs",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 124,
            "description": "Gets the list of logs",
            "itemtype": "method",
            "name": "_getStoredLogsFn",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level that get() should return.\n If not provided, it get() will return all logs from all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The array of logs",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 151,
            "description": "Gets the list of logs",
            "itemtype": "method",
            "name": "_clearAllStoredLogsFn",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level that get() should return.\n If not provided, it get() will return all logs from all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The array of logs",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 169,
            "description": "Print out all the store logs in console.",
            "itemtype": "method",
            "name": "_printAllStoredLogsFn",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 195,
            "description": "Handles the list of Skylink logs.",
            "itemtype": "property",
            "name": "SkylinkLogs",
            "type": "JSON",
            "required": 1,
            "global": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 206,
            "description": "Gets the list of logs",
            "itemtype": "property",
            "name": "SkylinkLogs.getLogs",
            "return": {
                "description": "The array of logs",
                "type": "Array"
            },
            "type": "Function",
            "required": 1,
            "global": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "logLevel",
                    "description": "The log level that getLogs() should return.\n If not provided, it getLogs() will return all logs from all levels.\n [Rel: Skylink.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 222,
            "description": "Clear all the stored logs.",
            "itemtype": "property",
            "name": "SkylinkLogs.clearAllLogs",
            "type": "Function",
            "required": 1,
            "global": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 234,
            "description": "Print out all the store logs in console.",
            "itemtype": "property",
            "name": "SkylinkLogs.printAllLogs",
            "type": "Function",
            "required": 1,
            "global": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 247,
            "description": "Logs all the console information.",
            "itemtype": "method",
            "name": "_logFn",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "The console message.",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the message is targeted to.",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "The interface the message is targeted to.",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The events the message is targeted to.",
                            "type": "String|Array"
                        },
                        {
                            "name": "3:",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "debugObject",
                    "description": "The console parameter string or object.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 324,
            "description": "Logs all the console information.",
            "itemtype": "attribute",
            "name": "log",
            "type": "JSON",
            "params": [
                {
                    "name": "debug",
                    "description": "For debug mode.",
                    "type": "Function"
                },
                {
                    "name": "log",
                    "description": "For log mode.",
                    "type": "Function"
                },
                {
                    "name": "info",
                    "description": "For info mode.",
                    "type": "Function"
                },
                {
                    "name": "warn",
                    "description": "For warn mode.",
                    "type": "Function"
                },
                {
                    "name": "serror",
                    "description": "For error mode.",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 341,
            "description": "Outputs a debug log in the console.",
            "itemtype": "property",
            "name": "log.debug",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.debug('This is my message', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 365,
            "description": "Outputs a normal log in the console.",
            "itemtype": "property",
            "name": "log.log",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.log('This is my message', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 389,
            "description": "Outputs an info log in the console.",
            "itemtype": "property",
            "name": "log.info",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.debug('This is my message', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 413,
            "description": "Outputs a warning log in the console.",
            "itemtype": "property",
            "name": "log.warn",
            "type": "Function",
            "example": [
                "\n  // Logging for message\n  log.debug('Here\\'s a warning. Please do xxxxx to resolve this issue', object);"
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 436,
            "description": "Outputs an error log in the console.",
            "itemtype": "property",
            "name": "log.error",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "required": 1,
            "scoped": "true",
            "component": "Log",
            "since": "0.5.4",
            "class": "Skylink",
            "subprops": [
                {
                    "name": "message",
                    "description": "or the message",
                    "type": "Array|String",
                    "props": [
                        {
                            "name": "0",
                            "description": "The targetPeerId the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "1",
                            "description": "he interface the log is targetted to",
                            "type": "String"
                        },
                        {
                            "name": "2",
                            "description": "The related names, keys or events to the log",
                            "type": "String|Array"
                        },
                        {
                            "name": "3",
                            "description": "The log message.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "object",
                    "description": "The log object.\n  // Logging for external information\n  log.error('There has been an error', object);",
                    "type": "String|Object",
                    "optional": true
                }
            ]
        },
        {
            "file": "source/skylink-debug.js",
            "line": 460,
            "description": "Sets the debugging log level. A log level displays logs of his level and higher:\nERROR > WARN > INFO > LOG > DEBUG.\n- The default log level is Skylink.LOG_LEVEL.WARN",
            "itemtype": "method",
            "name": "setLogLevel",
            "params": [
                {
                    "name": "logLevel",
                    "description": "The log level.[Rel: Skylink.Data.LOG_LEVEL]",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n  //Display logs level: Error, warn, info, log and debug.\n  SkylinkDemo.setLogLevel(SkylinkDemo.LOG_LEVEL.DEBUG);"
            ],
            "component": "Log",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-debug.js",
            "line": 487,
            "description": "Sets Skylink in debugging mode to display log stack trace.\n- By default, debugging mode is turned off.",
            "itemtype": "method",
            "name": "setDebugMode",
            "params": [
                {
                    "name": "options",
                    "description": "Is debugging mode enabled.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "trace",
                            "description": "If console output should trace.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "storeLogs",
                            "description": "If SkylinkLogs should store\n  the output logs.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "example": [
                "\n  // Example 1: just to enable\n  SkylinkDemo.setDebugMode(true);\n  // or\n  SkylinkDemo.setDebugMode();\n\n  // Example 2: just to disable\n  SkylinkDemo.setDebugMode(false);"
            ],
            "component": "Log",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 1,
            "description": "Syntactically private variables and utility functions.",
            "itemtype": "attribute",
            "name": "_EVENTS",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "final": 1,
            "required": 1,
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 13,
            "description": "Event fired when the socket connection to the signaling\nserver is open.",
            "itemtype": "event",
            "name": "channelOpen",
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 23,
            "description": "Event fired when the socket connection to the signaling\nserver has closed.",
            "itemtype": "event",
            "name": "channelClose",
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 33,
            "description": "Event fired when the socket connection received a message\nfrom the signaling server.",
            "itemtype": "event",
            "name": "channelMessage",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "JSON"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 44,
            "description": "Event fired when the socket connection has occurred an error.",
            "itemtype": "event",
            "name": "channelError",
            "params": [
                {
                    "name": "error",
                    "description": "Error message or object thrown.",
                    "type": "Object|String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 54,
            "description": "Event fired when the socket re-tries to connection with fallback ports.",
            "itemtype": "event",
            "name": "channelRetry",
            "params": [
                {
                    "name": "fallbackType",
                    "description": "The type of fallback [Rel: Skylink.SOCKET_FALLBACK]",
                    "type": "String"
                },
                {
                    "name": "currentAttempt",
                    "description": "The current attempt of the fallback re-try attempt.",
                    "type": "Number"
                }
            ],
            "component": "Events",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 65,
            "description": "Event fired when the socket connection failed connecting.\n- The difference between this and <b>channelError</b> is that\n  channelError triggers during the connection. This throws\n  when connection failed to be established.",
            "itemtype": "event",
            "name": "socketError",
            "params": [
                {
                    "name": "errorCode",
                    "description": "The error code.\n  [Rel: Skylink.SOCKET_ERROR]",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "The reconnection attempt or error object.",
                    "type": "Number|String|Object"
                },
                {
                    "name": "fallbackType",
                    "description": "The type of fallback [Rel: Skylink.SOCKET_FALLBACK]",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 81,
            "description": "Event fired whether the room is ready for use.",
            "itemtype": "event",
            "name": "readyStateChange",
            "params": [
                {
                    "name": "readyState",
                    "description": "[Rel: Skylink.READY_STATE_CHANGE]",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "Error object thrown.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "status",
                            "description": "Http status when retrieving information.\n  May be empty for other errors.",
                            "type": "Number"
                        },
                        {
                            "name": "content",
                            "description": "Error message.",
                            "type": "String"
                        },
                        {
                            "name": "errorCode",
                            "description": "Error code.\n  [Rel: Skylink.READY_STATE_CHANGE_ERROR]",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "room",
                    "description": "The room name",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 98,
            "description": "Event fired when a peer's handshake progress has changed.",
            "itemtype": "event",
            "name": "handshakeProgress",
            "params": [
                {
                    "name": "step",
                    "description": "The handshake progress step.\n  [Rel: Skylink.HANDSHAKE_PROGRESS]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer's handshake progress.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "Error message or object thrown.",
                    "type": "Object|String"
                }
            ],
            "component": "Events",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 111,
            "description": "Event fired when an ICE gathering state has changed.",
            "itemtype": "event",
            "name": "candidateGenerationState",
            "params": [
                {
                    "name": "state",
                    "description": "The ice candidate generation state.\n  [Rel: Skylink.CANDIDATE_GENERATION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had an ice candidate\n   generation state change.",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 124,
            "description": "Event fired when a peer Connection state has changed.",
            "itemtype": "event",
            "name": "peerConnectionState",
            "params": [
                {
                    "name": "state",
                    "description": "The peer connection state.\n  [Rel: Skylink.PEER_CONNECTION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had a peer connection state\n   change.",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 137,
            "description": "Event fired when an ICE connection state has changed.",
            "iceconnectionstate": "",
            "params": [
                {
                    "name": "state",
                    "description": "The ice connection state.\n  [Rel: Skylink.ICE_CONNECTION_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had an ice connection state change.",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 149,
            "description": "Event fired when webcam or microphone media access fails.",
            "itemtype": "event",
            "name": "mediaAccessError",
            "params": [
                {
                    "name": "error",
                    "description": "Error object thrown.",
                    "type": "Object|String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 159,
            "description": "Event fired when webcam or microphone media acces passes.",
            "itemtype": "event",
            "name": "mediaAccessSuccess",
            "params": [
                {
                    "name": "stream",
                    "description": "MediaStream object.",
                    "type": "Object"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 169,
            "description": "Event fired when it's required to have audio or video access.",
            "itemtype": "event",
            "name": "mediaAccessRequired",
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 178,
            "description": "Event fired when media access to MediaStream has stopped.",
            "itemtype": "event",
            "name": "mediaAccessStopped",
            "component": "Events",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 187,
            "description": "Event fired when a peer joins the room.",
            "itemtype": "event",
            "name": "peerJoined",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that joined the room.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "room",
                            "description": "The room name the peer belongs to.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 224,
            "description": "Event fired when a peer's connection is restarted.",
            "itemtype": "event",
            "name": "peerRestart",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is being restarted.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON"
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number"
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number"
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "room",
                            "description": "The room name the peer belongs to.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "isSelfInitiateRestart",
                    "description": "Is it us who initiated the restart.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 261,
            "description": "Event fired when a peer information is updated.",
            "itemtype": "event",
            "name": "peerUpdated",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that had information updaed.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "room",
                            "description": "The room name the peer belongs to.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 298,
            "description": "Event fired when a peer leaves the room",
            "itemtype": "event",
            "name": "peerLeft",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that left.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "room",
                            "description": "The room name the peer belongs to.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 335,
            "description": "Event fired when a remote stream has become available.\n- This occurs after the user joins the room.\n- This is changed from <b>addPeerStream</b> event.\n- Note that <b>addPeerStream</b> is removed from the specs.\n- There has been a documentation error whereby the stream it is\n  supposed to be (stream, peerId, isSelf), but instead is received\n  as (peerId, stream, isSelf) in 0.5.0.",
            "itemtype": "event",
            "name": "incomingStream",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is sending the stream.",
                    "type": "String"
                },
                {
                    "name": "stream",
                    "description": "MediaStream object.",
                    "type": "Object"
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "room",
                            "description": "The room name the peer belongs to.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 379,
            "description": "Event fired when a message being broadcasted is received.\n- This is changed from <b>chatMessageReceived</b>,\n  <b>privateMessage</b> and <b>publicMessage</b> event.\n- Note that <b>chatMessageReceived</b>, <b>privateMessage</b>\n  and <b>publicMessage</b> is removed from the specs.",
            "itemtype": "event",
            "name": "incomingMessage",
            "params": [
                {
                    "name": "message",
                    "description": "Message object that is received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "content",
                            "description": "Data that is broadcasted.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "PeerId of the sender peer.",
                            "type": "String"
                        },
                        {
                            "name": "targetPeerId",
                            "description": "PeerId that is specifically\n  targeted to receive the message.",
                            "type": "String"
                        },
                        {
                            "name": "isPrivate",
                            "description": "Is data received a private message.",
                            "type": "Boolean"
                        },
                        {
                            "name": "isDataChannel",
                            "description": "Is data received from a\n  data channel.",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the sender peer.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "room",
                            "description": "The room name the peer belongs to.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 428,
            "description": "Event fired when a data transfer is completed.",
            "itemtype": "event",
            "name": "incomingData",
            "params": [
                {
                    "name": "data",
                    "description": "The transfer blob data. See the\n  [createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL.createObjectURL)\n  method on how you can convert the blob to a download link.",
                    "type": "Blob"
                },
                {
                    "name": "transferId",
                    "description": "TransferId of the data.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that has a data\n  transfer state change.",
                    "type": "String"
                },
                {
                    "name": "transferInfo",
                    "description": "Data transfer information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "percentage",
                            "description": "The percetange of data being\n  uploaded / downloaded.",
                            "type": "JSON"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "PeerId of the sender.",
                            "type": "JSON"
                        },
                        {
                            "name": "name",
                            "description": "Data name.",
                            "type": "JSON"
                        },
                        {
                            "name": "size",
                            "description": "Data size.",
                            "type": "JSON"
                        },
                        {
                            "name": "timeout",
                            "description": "The time (in seconds) waiting for the next data packet\n response before throwing a timeout error.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "The flag that indicates if the transfer is from self or received.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 453,
            "description": "Event fired when a data transfer request is made.",
            "itemtype": "event",
            "name": "incomingDataRequest",
            "params": [
                {
                    "name": "transferId",
                    "description": "TransferId of the data.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that has a data\n  transfer state change.",
                    "type": "String"
                },
                {
                    "name": "transferInfo",
                    "description": "Data transfer information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "percentage",
                            "description": "The percetange of data being\n  uploaded / downloaded.",
                            "type": "JSON"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "PeerId of the sender.",
                            "type": "JSON"
                        },
                        {
                            "name": "name",
                            "description": "Data name.",
                            "type": "JSON"
                        },
                        {
                            "name": "size",
                            "description": "Data size.",
                            "type": "JSON"
                        },
                        {
                            "name": "timeout",
                            "description": "The time (in seconds) waiting for the next data packet\n response before throwing a timeout error.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "The flag that indicates if the transfer is from self or received.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 474,
            "description": "Event fired when connected to a room and the lock status has changed.",
            "itemtype": "event",
            "name": "roomLock",
            "params": [
                {
                    "name": "isLocked",
                    "description": "Is the room locked.",
                    "type": "Boolean"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that is locking/unlocking\n  the room.",
                    "type": "String"
                },
                {
                    "name": "peerInfo",
                    "description": "Peer's information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "settings",
                            "description": "Peer's stream settings.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Peer's audio stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "audio.stereo",
                                    "description": "If peer has stereo\n  enabled or not.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video",
                                    "description": "Peer's video stream\n  settings.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "video.resolution",
                                    "description": "Peer's video stream resolution [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.width",
                                    "description": "Peer's video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.resolution.height",
                                    "description": "Peer's video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "video.frameRate",
                                    "description": "Peer's video stream resolution minimum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "mediaStatus",
                            "description": "Peer stream status.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "audioMuted",
                                    "description": "If peer's audio\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "videoMuted",
                                    "description": "If peer's video\n  stream is muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                }
                            ]
                        },
                        {
                            "name": "userData",
                            "description": "Peer's custom user data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "agent",
                            "description": "Peer's browser agent.",
                            "type": "JSON",
                            "props": [
                                {
                                    "name": "name",
                                    "description": "Peer's browser agent name.",
                                    "type": "String"
                                },
                                {
                                    "name": "version",
                                    "description": "Peer's browser agent version.",
                                    "type": "Number"
                                }
                            ]
                        },
                        {
                            "name": "room",
                            "description": "The room name the peer belongs to.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "isSelf",
                    "description": "Is the peer self.",
                    "type": "Boolean"
                }
            ],
            "component": "Events",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 513,
            "description": "Event fired when a peer's datachannel state has changed.",
            "itemtype": "event",
            "name": "dataChannelState",
            "params": [
                {
                    "name": "state",
                    "description": "The datachannel state.\n  [Rel: Skylink.DATA_CHANNEL_STATE]",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of peer that has a datachannel\n  state change.",
                    "type": "String"
                },
                {
                    "name": "error",
                    "description": "Error message in case there is failure",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "channelName",
                    "description": "The channel name or ID.",
                    "type": "String"
                },
                {
                    "name": "channelType",
                    "description": "The datachannel type.\n  [Rel: Skylink.DATA_CHANNEL_TYPE]",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 530,
            "description": "Event fired when a data transfer state has changed.\n- Note that <u>transferInfo.data</u> sends the blob data, and\n  no longer a blob url.",
            "itemtype": "event",
            "name": "dataTransferState",
            "params": [
                {
                    "name": "state",
                    "description": "The data transfer state.\n  [Rel: Skylink.DATA_TRANSFER_STATE]",
                    "type": "String"
                },
                {
                    "name": "transferId",
                    "description": "TransferId of the data.",
                    "type": "String"
                },
                {
                    "name": "peerId",
                    "description": "PeerId of the peer that has a data\n  transfer state change.",
                    "type": "String"
                },
                {
                    "name": "transferInfo",
                    "description": "Data transfer information.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "percentage",
                            "description": "The percetange of data being\n  uploaded / downloaded.",
                            "type": "JSON"
                        },
                        {
                            "name": "senderPeerId",
                            "description": "PeerId of the sender.",
                            "type": "JSON"
                        },
                        {
                            "name": "data",
                            "description": "The blob data. See the\n  [createObjectURL](https://developer.mozilla.org/en-US/docs/Web/API/URL.createObjectURL)\n  method on how you can convert the blob to a download link.",
                            "type": "JSON"
                        },
                        {
                            "name": "name",
                            "description": "Data name.",
                            "type": "JSON"
                        },
                        {
                            "name": "size",
                            "description": "Data size.",
                            "type": "JSON"
                        },
                        {
                            "name": "timeout",
                            "description": "The time (in seconds) waiting for the next data packet\n response before throwing a timeout error.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "error",
                    "description": "The error object.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "message",
                            "description": "Error message thrown.",
                            "type": "String"
                        },
                        {
                            "name": "transferType",
                            "description": "Is error from uploading or downloading.\n  [Rel: Skylink.DATA_TRANSFER_TYPE]",
                            "type": "String"
                        }
                    ]
                }
            ],
            "component": "Events",
            "since": "0.4.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 561,
            "description": "Event fired when the signaling server warns the user.",
            "itemtype": "event",
            "name": "systemAction",
            "params": [
                {
                    "name": "action",
                    "description": "The action that is required for\n  the user to follow. [Rel: Skylink.SYSTEM_ACTION]",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "The reason for the action.",
                    "type": "String"
                },
                {
                    "name": "reason",
                    "description": "The reason why the action is given.\n  [Rel: Skylink.SYSTEM_ACTION_REASON]",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 575,
            "description": "Event fired when a server peer joins the room",
            "itemtype": "event",
            "name": "serverPeerJoined",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the server peer that left.",
                    "type": "String"
                },
                {
                    "name": "serverPeerType",
                    "description": "The server peer type [Rel: Skylink.SERVER_PEER_TYPE]",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 586,
            "description": "Event fired when a server peer leaves the room",
            "itemtype": "event",
            "name": "serverPeerLeft",
            "params": [
                {
                    "name": "peerId",
                    "description": "PeerId of the server peer that left.",
                    "type": "String"
                },
                {
                    "name": "serverPeerType",
                    "description": "The server peer type [Rel: Skylink.SERVER_PEER_TYPE]",
                    "type": "String"
                }
            ],
            "component": "Events",
            "since": "0.6.1",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 598,
            "description": "Events with callbacks that would be fired only once once condition is met.",
            "itemtype": "attribute",
            "name": "_onceEvents",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Events",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 610,
            "description": "The timestamp for throttle function to use.",
            "itemtype": "attribute",
            "name": "_timestamp",
            "type": "JSON",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Events",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 624,
            "description": "Trigger all the callbacks associated with an event.\n- Note that extra arguments can be passed to the callback which\n  extra argument can be expected by callback is documented by each event.",
            "itemtype": "method",
            "name": "_trigger",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 680,
            "description": "To register a callback function to an event.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event. See the event list to see what you can register.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the event is triggered.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n  SkylinkDemo.on('peerJoined', function (peerId, peerInfo) {\n     alert(peerId + ' has joined the room');\n  });"
            ],
            "component": "Events",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 703,
            "description": "To register a callback function to an event that is fired once a condition is met.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event. See the event list to see what you can register.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the event is triggered.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The provided condition that would trigger this event.\n  If not provided, it will return true when the event is triggered.\n  Return a true to fire the callback.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "fireAlways",
                    "description": "The function does not get removed onced triggered,\n  but triggers everytime the event is called.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n  SkylinkDemo.once('peerConnectionState', function (state, peerId) {\n    alert('Peer has left');\n  }, function (state, peerId) {\n    return state === SkylinkDemo.PEER_CONNECTION_STATE.CLOSED;\n  });"
            ],
            "component": "Events",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 746,
            "description": "To unregister a callback function from an event.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event. See the event list to see what you can unregister.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the event is triggered.\n  Not providing any callback turns all callbacks tied to that event off.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n  SkylinkDemo.off('peerJoined', callback);"
            ],
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 788,
            "description": "Does a check condition first to check if event is required to be subscribed.\nIf check condition fails, it subscribes an event with\n {{#crossLink \"Skylink/once:method\"}}once(){{/crossLink}} method to wait for\nthe condition to pass to fire the callback.",
            "itemtype": "method",
            "name": "_condition",
            "params": [
                {
                    "name": "eventName",
                    "description": "The Skylink event.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The callback fired after the condition is met.",
                    "type": "Function"
                },
                {
                    "name": "checkFirst",
                    "description": "The condition to check that if pass, it would fire the callback,\n  or it will just subscribe to an event and fire when condition is met.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The provided condition that would trigger this event.\n  If not provided, it will return true when the event is triggered.\n  Return a true to fire the callback.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "fireAlways",
                    "description": "The function does not get removed onced triggered,\n  but triggers everytime the event is called.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 827,
            "description": "Sets an interval check. If condition is met, fires callback.",
            "itemtype": "method",
            "name": "_wait",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback fired after the condition is met.",
                    "type": "Function"
                },
                {
                    "name": "condition",
                    "description": "The provided condition that would trigger this the callback.",
                    "type": "Function"
                },
                {
                    "name": "intervalTime",
                    "description": "The interval loop timeout.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "50"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Events",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/skylink-events.js",
            "line": 870,
            "description": "Returns a wrapper of the original function, which only fires once during\n a specified amount of time.",
            "itemtype": "method",
            "name": "_throttle",
            "params": [
                {
                    "name": "func",
                    "description": "The function that should be throttled.",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "The amount of time that function need to throttled (in ms)",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Events",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 1,
            "description": "The list of channel connection error.\n- The errors that would occur are:",
            "itemtype": "attribute",
            "name": "SOCKET_ERROR",
            "type": "JSON",
            "params": [
                {
                    "name": "CONNECTION_FAILED",
                    "description": "The connection failed. Up to user's\n  defined reconnection attempts to decide on a reconnection.",
                    "type": "Number"
                },
                {
                    "name": "RECONNECTION_FAILED",
                    "description": "The reconnection failed. Up to user's\n  defined reconnection attempts to decide on another reconnection.",
                    "type": "String"
                },
                {
                    "name": "CONNECTION_ABORTED",
                    "description": "No reconnection specified.\n  Connection is aborted.",
                    "type": "String"
                },
                {
                    "name": "RECONNECTION_ABORTED",
                    "description": "All reconnection attempts have failed.\n  Reconnection is aborted.",
                    "type": "String"
                },
                {
                    "name": "RECONNECTION_ATTEMPT",
                    "description": "A reconnection attempt has been fired.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Socket",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 28,
            "description": "The queue of messages to be sent to signaling server.",
            "itemtype": "attribute",
            "name": "_socketMessageQueue",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Socket",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 40,
            "description": "The timeout used to send socket message queue.",
            "itemtype": "attribute",
            "name": "_socketMessageTimeout",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Socket",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 53,
            "description": "The list of ports that SkylinkJS would use to attempt to connect to the signaling server with.",
            "itemtype": "attribute",
            "name": "_socketPorts",
            "type": "JSON",
            "params": [
                {
                    "name": "http://",
                    "description": "The list of HTTP ports.",
                    "type": "Array"
                },
                {
                    "name": "https://",
                    "description": "The list of HTTPs ports.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Socket",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 70,
            "description": "The list of channel connection fallback states.\n- The fallback states that would occur are:",
            "itemtype": "attribute",
            "name": "SOCKET_FALLBACK",
            "type": "JSON",
            "params": [
                {
                    "name": "NON_FALLBACK",
                    "description": "Non-fallback state,",
                    "type": "String"
                },
                {
                    "name": "FALLBACK_PORT",
                    "description": "Fallback to non-ssl port for channel re-try.",
                    "type": "String"
                },
                {
                    "name": "FALLBACK_PORT_SSL",
                    "description": "Fallback to ssl port for channel re-try.",
                    "type": "String"
                },
                {
                    "name": "LONG_POLLING",
                    "description": "Fallback to non-ssl long-polling.",
                    "type": "String"
                },
                {
                    "name": "LONG_POLLING_SSL",
                    "description": "Fallback to ssl port for long-polling.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "component": "Socket",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 93,
            "description": "The current socket opened state.",
            "itemtype": "attribute",
            "name": "_channelOpen",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Socket",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 105,
            "description": "The signaling server to connect to.",
            "itemtype": "attribute",
            "name": "_signalingServer",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 116,
            "description": "The signaling server protocol to use.\n<ul>\n<li><code>https:</code>\n<ul><li>Default port is <code>443</code>.</li>\n    <li>Fallback port is <code>3443</code>.</li>\n</ul></li>\n<li><code>http:</code>\n<ul><li>Default port is <code>80</code>.</li>\n    <li>Fallback port is <code>3000</code>.</li>\n</ul></li>\n</ul>",
            "itemtype": "attribute",
            "name": "_signalingServerProtocol",
            "type": "String",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 137,
            "description": "The signaling server port to connect to.",
            "itemtype": "attribute",
            "name": "_signalingServerPort",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 148,
            "description": "The actual socket object that handles the connection.",
            "itemtype": "attribute",
            "name": "_socket",
            "type": "Object",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 160,
            "description": "The socket connection timeout\n<ul>\n<li><code>0</code> Uses the default timeout from socket.io\n    <code>20000</code>ms.</li>\n<li><code>>0</code> Uses the user set timeout</li>\n</ul>",
            "itemtype": "attribute",
            "name": "_socketTimeout",
            "type": "Number",
            "default": "0",
            "required": 1,
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 178,
            "description": "The socket connection to use XDomainRequest.",
            "itemtype": "attribute",
            "name": "_socketUseXDR",
            "type": "Boolean",
            "default": "false",
            "required": 1,
            "component": "Socket",
            "access": "private",
            "tagname": "",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 191,
            "description": "Sends a message to the signaling server.\n- Not to be confused with method\n  {{#crossLink \"Skylink/sendMessage:method\"}}sendMessage(){{/crossLink}}\n  that broadcasts messages. This is for sending socket messages.",
            "itemtype": "method",
            "name": "_sendChannelMessage",
            "params": [
                {
                    "name": "message",
                    "description": "",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 293,
            "description": "Create the socket object to refresh connection.",
            "itemtype": "method",
            "name": "_createSocket",
            "params": [
                {
                    "name": "type",
                    "description": "The type of socket.io connection to use.\n<ul>\n<li><code>\"WebSocket\"</code>: Uses the WebSocket connection</li>\n<li><code>\"Polling\"</code>: Uses the long-polling connection</li>\n</ul>",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 454,
            "description": "Initiate a socket signaling connection.",
            "itemtype": "method",
            "name": "_openChannel",
            "trigger": "channelMessage, channelOpen, channelError, channelClose",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/socket-channel.js",
            "line": 495,
            "description": "Closes the socket signaling connection.",
            "itemtype": "method",
            "name": "_closeChannel",
            "access": "private",
            "tagname": "",
            "component": "Socket",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1,
            "description": "Current version of signaling message protocol",
            "itemtype": "attribute",
            "name": "SM_PROTOCOL_VERSION",
            "type": "String",
            "required": 1,
            "component": "Socket",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 12,
            "description": "The Message protocol list. The <code>message</code> object is an\nindicator of the expected parameters to be given and received.",
            "itemtype": "attribute",
            "name": "_SIG_MESSAGE_TYPE",
            "type": "JSON",
            "params": [
                {
                    "name": "JOIN_ROOM",
                    "description": "Send to initiate the connection to the Room.",
                    "type": "String"
                },
                {
                    "name": "ENTER",
                    "description": "Broadcasts to any Peers connected to the room to\n   intiate a Peer connection.",
                    "type": "String"
                },
                {
                    "name": "WELCOME",
                    "description": "Send as a response to Peer's enter received. User starts creating\n   offer to the Peer.",
                    "type": "String"
                },
                {
                    "name": "OFFER",
                    "description": "Send when <code>createOffer</code> is completed and generated.",
                    "type": "String"
                },
                {
                    "name": "ANSWER",
                    "description": "Send as a response to Peer's offer Message after <code>createAnswer</code>\n  is called.",
                    "type": "String"
                },
                {
                    "name": "CANDIDATE",
                    "description": "Send when an ICE Candidate is generated.",
                    "type": "String"
                },
                {
                    "name": "BYE",
                    "description": "Received as a response from server that a Peer has left the Room.",
                    "type": "String"
                },
                {
                    "name": "REDIRECT",
                    "description": "Received as a warning from server when User is rejected or\n  is jamming the server.",
                    "type": "String"
                },
                {
                    "name": "UPDATE_USER",
                    "description": "Broadcast when a User's information is updated to reflect the\n  the changes on Peer's end.",
                    "type": "String"
                },
                {
                    "name": "ROOM_LOCK",
                    "description": "Broadcast to change the Room lock status.",
                    "type": "String"
                },
                {
                    "name": "MUTE_VIDEO",
                    "description": "Broadcast when User's video stream is muted or unmuted.",
                    "type": "String"
                },
                {
                    "name": "MUTE_AUDIO",
                    "description": "Broadcast when User's audio stream is muted or unmuted.",
                    "type": "String"
                },
                {
                    "name": "PUBLIC_MESSAGE",
                    "description": "Broadcasts a Message object to all Peers in the Room.",
                    "type": "String"
                },
                {
                    "name": "PRIVATE_MESSAGE",
                    "description": "Sends a Message object to a Peer in the Room.",
                    "type": "String"
                },
                {
                    "name": "RESTART",
                    "description": "Sends when a Peer connection is restarted.",
                    "type": "String"
                },
                {
                    "name": "STREAM",
                    "description": "Broadcast when a Stream has ended. This is temporal.",
                    "type": "String"
                },
                {
                    "name": "GROUP",
                    "description": "Messages are bundled together when messages are sent too fast to\n  prevent server redirects over sending less than 1 second interval.",
                    "type": "String"
                }
            ],
            "readonly": "",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 68,
            "description": "List of signaling message types that can be queued before sending to server.",
            "itemtype": "attribute",
            "name": "_groupMessageList",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Message",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 87,
            "description": "The flag that indicates if MCU is enabled.",
            "itemtype": "attribute",
            "name": "_hasMCU",
            "type": "Boolean",
            "development": "true",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 100,
            "description": "Indicates whether the other peers should only receive stream\n\tfrom the current peer and not sending out any stream.\n\tSuitable for use cases such as streaming lecture/concert.",
            "itemtype": "attribute",
            "name": "_receiveOnly",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Message",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 115,
            "description": "Handles every incoming signaling message received.",
            "itemtype": "method",
            "name": "_processSigMessage",
            "params": [
                {
                    "name": "messageString",
                    "description": "The message object stringified received.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 136,
            "description": "Handles the single signaling message received.",
            "itemtype": "method",
            "name": "_processingSingleMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message object received.",
                    "type": "JSON"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 215,
            "description": "Handles the REDIRECT Message event.",
            "itemtype": "method",
            "name": "_redirectHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "info",
                            "description": "The server's message.",
                            "type": "String"
                        },
                        {
                            "name": "action",
                            "description": "The action that User has to take on.\n  [Rel: Skylink.SYSTEM_ACTION]",
                            "type": "String"
                        },
                        {
                            "name": "reason",
                            "description": "The reason of why the action is worked upon.\n  [Rel: Skylink.SYSTEM_ACTION_REASON]",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"redirect\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "systemAction",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 249,
            "description": "Handles the UPDATE_USER Message event.",
            "itemtype": "method",
            "name": "_updateUserEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "userData",
                            "description": "The updated User data.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"updateUserEvent\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 275,
            "description": "Handles the ROOM_LOCK Message event.",
            "itemtype": "method",
            "name": "_roomLockEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "lock",
                            "description": "The flag to indicate if the Room is locked or not",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"roomLockEvent\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "roomLock",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 296,
            "description": "Handles the MUTE_AUDIO Message event.",
            "itemtype": "method",
            "name": "_muteAudioEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.\n  [Rel: Skylink._SIG_MESSAGE_TYPE.MUTE_AUDIO.message]",
                    "type": "JSON"
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 319,
            "description": "Handles the MUTE_VIDEO Message event.",
            "itemtype": "method",
            "name": "_muteVideoEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "muted",
                            "description": "The flag to indicate if the User's video\n   stream is muted or not.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"muteVideoEvent\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 346,
            "description": "Handles the STREAM Message event.",
            "itemtype": "method",
            "name": "_streamEventHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The peerId of the sender.",
                            "type": "String"
                        },
                        {
                            "name": "status",
                            "description": "The MediaStream status.\n<ul>\n<li><code>ended</code>: MediaStream has ended</li>\n</ul>",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"stream\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerUpdated",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.2.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 379,
            "description": "Handles the BYTE Message event.",
            "itemtype": "method",
            "name": "_byeHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The peerId of the Peer that has left the Room.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"bye\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerLeft",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 398,
            "description": "Handles the PRIVATE_MESSAGE Message event.",
            "itemtype": "method",
            "name": "_privateMessageHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "data",
                            "description": "The Message object.",
                            "type": "JSON|String"
                        },
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "cid",
                            "description": "The credentialId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "target",
                            "description": "The peerId of the targeted Peer.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"private\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "privateMessage",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 427,
            "description": "Handles the PUBLIC_MESSAGE Message event.",
            "itemtype": "method",
            "name": "_publicMessageHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "muted",
                            "description": "The flag to indicate if the User's audio\n   stream is muted or not.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"muteAudioEvent\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "publicMessage",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 455,
            "description": "Handles the IN_ROOM Message event.",
            "itemtype": "method",
            "name": "_inRoomHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": []
                },
                {
                    "name": "message",
                    "description": "Expected IN_ROOM data object format.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "",
                            "description": "The roomId of the connected room.",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The User's userId.",
                            "type": "String"
                        },
                        {
                            "name": "",
                            "description": "The Peer connection iceServers configuration.",
                            "type": "JSON"
                        },
                        {
                            "name": "",
                            "description": "Protocol step: <code>\"inRoom\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "peerJoined",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.1.0",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 498,
            "description": "Handles the ENTER Message event.",
            "itemtype": "method",
            "name": "_enterHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId / userId.",
                            "type": "String"
                        },
                        {
                            "name": "receiveOnly",
                            "description": "The flag to prevent Peers from sending\n  any Stream to the User but receive User's stream only.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "agent",
                            "description": "The Peer's browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The Peer's browser version.",
                            "type": "String"
                        },
                        {
                            "name": "userInfo",
                            "description": "The Peer's information.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "settings",
                                    "description": "The stream settings",
                                    "type": "JSON"
                                },
                                {
                                    "name": "settings.audio",
                                    "description": "The flag to indicate if audio is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.audio.stereo",
                                    "description": "The flag to indiciate if stereo should be enabled in OPUS connection.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video",
                                    "description": "The flag to indicate if video is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video.resolution",
                                    "description": "[Rel: Skylink.VIDEO_RESOLUTION]\n  The video stream resolution.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.width",
                                    "description": "The video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.height",
                                    "description": "The video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.frameRate",
                                    "description": "The video stream maximum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mediaStatus",
                                    "description": "The Peer's Stream status.\n  This is used to indicate if connected video or audio stream is muted.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "mediaStatus.audioMuted",
                                    "description": "The flag to indicate that the Peer's audio stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mediaStatus.videoMuted",
                                    "description": "The flag to indicate that the Peer's video stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userData",
                                    "description": "The custom User data.",
                                    "type": "String|JSON"
                                }
                            ]
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"enter\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress, peerJoined",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 599,
            "description": "Handles the RESTART Message event.",
            "itemtype": "method",
            "name": "_restartHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId / userId.",
                            "type": "String"
                        },
                        {
                            "name": "receiveOnly",
                            "description": "The flag to prevent Peers from sending\n  any Stream to the User but receive User's stream only.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enableIceTrickle",
                            "description": "The flag to forcefully enable or disable ICE Trickle for the Peer connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enableDataChannel",
                            "description": "The flag to forcefully enable or disable ICE Trickle for the Peer connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "agent",
                            "description": "The Peer's browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The Peer's browser version.",
                            "type": "String"
                        },
                        {
                            "name": "userInfo",
                            "description": "The Peer's information.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "settings",
                                    "description": "The stream settings",
                                    "type": "JSON"
                                },
                                {
                                    "name": "settings.audio",
                                    "description": "The flag to indicate if audio is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.audio.stereo",
                                    "description": "The flag to indiciate if stereo should be enabled in OPUS connection.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video",
                                    "description": "The flag to indicate if video is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video.resolution",
                                    "description": "[Rel: Skylink.VIDEO_RESOLUTION]\n  The video stream resolution.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.width",
                                    "description": "The video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.height",
                                    "description": "The video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.frameRate",
                                    "description": "The video stream maximum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mediaStatus",
                                    "description": "The Peer's Stream status.\n  This is used to indicate if connected video or audio stream is muted.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "mediaStatus.audioMuted",
                                    "description": "The flag to indicate that the Peer's audio stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mediaStatus.videoMuted",
                                    "description": "The flag to indicate that the Peer's video stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userData",
                                    "description": "The custom User data.",
                                    "type": "String|JSON"
                                }
                            ]
                        },
                        {
                            "name": "target",
                            "description": "The peerId of the peer to respond the enter message to.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"restart\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress, peerRestart",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 713,
            "description": "Handles the WELCOME Message event.",
            "itemtype": "method",
            "name": "_welcomeHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected Room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId / userId.",
                            "type": "String"
                        },
                        {
                            "name": "receiveOnly",
                            "description": "The flag to prevent Peers from sending\n  any Stream to the User but receive User's stream only.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enableIceTrickle",
                            "description": "The flag to forcefully enable or disable ICE Trickle for the Peer connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "enableDataChannel",
                            "description": "The flag to forcefully enable or disable ICE Trickle for the Peer connection.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "agent",
                            "description": "The Peer's browser agent.",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "The Peer's browser version.",
                            "type": "String"
                        },
                        {
                            "name": "userInfo",
                            "description": "The Peer's information.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "settings",
                                    "description": "The stream settings",
                                    "type": "JSON"
                                },
                                {
                                    "name": "settings.audio",
                                    "description": "The flag to indicate if audio is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.audio.stereo",
                                    "description": "The flag to indiciate if stereo should be enabled in OPUS connection.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video",
                                    "description": "The flag to indicate if video is enabled in the connection or not.",
                                    "type": "Boolean|JSON",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "settings.video.resolution",
                                    "description": "[Rel: Skylink.VIDEO_RESOLUTION]\n  The video stream resolution.",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.width",
                                    "description": "The video stream resolution width.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.resolution.height",
                                    "description": "The video stream resolution height.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "settings.video.frameRate",
                                    "description": "The video stream maximum frame rate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mediaStatus",
                                    "description": "The Peer's Stream status.\n  This is used to indicate if connected video or audio stream is muted.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "mediaStatus.audioMuted",
                                    "description": "The flag to indicate that the Peer's audio stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "mediaStatus.videoMuted",
                                    "description": "The flag to indicate that the Peer's video stream is muted or disabled.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "true"
                                },
                                {
                                    "name": "userData",
                                    "description": "The custom User data.",
                                    "type": "String|JSON"
                                }
                            ]
                        },
                        {
                            "name": "target",
                            "description": "The peerId of the peer to respond the enter message to.",
                            "type": "String"
                        },
                        {
                            "name": "weight",
                            "description": "The priority weight of the message. This is required\n  when two Peers receives each other's welcome message, hence disrupting the handshaking to\n  be incorrect. With a generated weight usually done by invoking <code>Date.UTC()</code>, this\n  would check against the received weight and generated weight for the Peer to prioritize who\n  should create or receive the offer.\n<ul>\n<li><code>>=0</code> An ongoing weight priority check is going on.Weight priority message.</li>\n<li><code>-1</code> Enforce create offer to happen without any priority weight check.</li>\n<li><code>-2</code> Enforce create offer and re-creating of Peer connection to happen without\n   any priority weight check.</li>\n</ul>",
                            "type": "Number"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"welcome\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress, peerJoined",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 848,
            "description": "Handles the OFFER Message event.",
            "itemtype": "method",
            "name": "_offerHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "sdp",
                            "description": "The generated offer session description.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"offer\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 897,
            "description": "Handles the CANDIDATE Message event.",
            "itemtype": "method",
            "name": "_candidateHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected room.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "sdp",
                            "description": "The ICE Candidate's session description.",
                            "type": "String"
                        },
                        {
                            "name": "target",
                            "description": "The peerId of the targeted Peer.",
                            "type": "String"
                        },
                        {
                            "name": "id",
                            "description": "The ICE Candidate's id.",
                            "type": "String"
                        },
                        {
                            "name": "candidate",
                            "description": "The ICE Candidate's candidate object.",
                            "type": "String"
                        },
                        {
                            "name": "label",
                            "description": "The ICE Candidate's label.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"candidate\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 972,
            "description": "Handles the ANSWER Message event.",
            "itemtype": "method",
            "name": "_answerHandler",
            "params": [
                {
                    "name": "message",
                    "description": "The Message object received.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "rid",
                            "description": "The roomId of the connected room.",
                            "type": "String"
                        },
                        {
                            "name": "sdp",
                            "description": "The generated answer session description.",
                            "type": "String"
                        },
                        {
                            "name": "mid",
                            "description": "The sender's peerId.",
                            "type": "String"
                        },
                        {
                            "name": "type",
                            "description": "Protocol step: <code>\"answer\"</code>.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "trigger": "handshakeProgress",
            "access": "private",
            "tagname": "",
            "component": "Message",
            "since": "0.5.1",
            "class": "Skylink"
        },
        {
            "file": "source/socket-message.js",
            "line": 1034,
            "description": "Sends Message object to either a targeted Peer or Broadcasts to all Peers connected in the Room.\n- Message is sent using the socket connection to the signaling server and relayed to\n  the recipient(s). For direct messaging to a recipient refer to\n  {{#crossLink \"Skylink/sendP2PMessage:method\"}}sendP2PMessage(){{/crossLink}}.",
            "itemtype": "method",
            "name": "sendMessage",
            "params": [
                {
                    "name": "message",
                    "description": "The message data to send.",
                    "type": "String|JSON"
                },
                {
                    "name": "targetPeerId",
                    "description": "PeerId of the peer to send a private\n  message data to. If not specified then send to all peers.",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Send to all peers\n  SkylinkDemo.sendMessage('Hi there!');\n\n  // Example 2: Send to a targeted peer\n  SkylinkDemo.sendMessage('Hi there peer!', targetPeerId);"
            ],
            "trigger": "incomingMessage",
            "component": "Message",
            "since": "0.4.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1,
            "description": "The list of available Video Codecs.\n- Note that setting this video codec does not mean that it will be\n  the primary codec used for the call as it may vary based on the offerer's\n  codec set.\n- The available video codecs are:",
            "itemtype": "attribute",
            "name": "VIDEO_CODEC",
            "params": [
                {
                    "name": "AUTO",
                    "description": "The default option. This means to use any video codec given by generated sdp.",
                    "type": "String"
                },
                {
                    "name": "VP8",
                    "description": "Use the VP8 video codec. This is the common and mandantory video codec used.",
                    "type": "String"
                },
                {
                    "name": "H264",
                    "description": "Use the H264 video codec. This only works if the browser supports H264.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "component": "Stream",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 23,
            "description": "The list of available Audio Codecs.\n- Note that setting this audio codec does not mean that it will be\n  the primary codec used for the call as it may vary based on the offerer's\n  codec set.\n- The available audio codecs are:",
            "itemtype": "attribute",
            "name": "AUDIO_CODEC",
            "params": [
                {
                    "name": "AUTO",
                    "description": "The default option. This means to use any audio codec given by generated sdp.",
                    "type": "String"
                },
                {
                    "name": "OPUS",
                    "description": "Use the OPUS audio codec.\n  This is the common and mandantory audio codec used. This codec supports stereo.",
                    "type": "String"
                },
                {
                    "name": "ISAC",
                    "description": "Use the ISAC audio codec.\n  This only works if the browser supports ISAC. This codec is mono based.",
                    "type": "String"
                }
            ],
            "type": "JSON",
            "readonly": "",
            "component": "Stream",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 47,
            "description": "Stores the preferred audio codec.",
            "itemtype": "attribute",
            "name": "_selectedAudioCodec",
            "type": "String",
            "default": "Skylink.AUDIO_CODEC.OPUS",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 59,
            "description": "Stores the preferred video codec.",
            "itemtype": "attribute",
            "name": "_selectedVideoCodec",
            "type": "String",
            "default": "Skylink.VIDEO_CODEC.VP8",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 72,
            "description": "The list of recommended video resolutions.\n- Note that the higher the resolution, the connectivity speed might\n  be affected.\n- The available video resolutions type are: (See\n{{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}\n  for more information)",
            "params": [
                {
                    "name": "QQVGA",
                    "description": "QQVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "160",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "120",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HQVGA",
                    "description": "HQVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "240",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "160",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "3:2",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "QVGA",
                    "description": "QVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "320",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "240",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WQVGA",
                    "description": "WQVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "384",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "240",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:10",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HVGA",
                    "description": "HVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "480",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "320",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "3:2",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "VGA",
                    "description": "VGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "640",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "480",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WVGA",
                    "description": "WVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "768",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "480",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:10",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "FWVGA",
                    "description": "FWVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "854",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "480",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "SVGA",
                    "description": "SVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "800",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "600",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "4:3",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "DVGA",
                    "description": "DVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "960",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "640",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "3:2",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WSVGA",
                    "description": "WSVGA resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1024",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "576",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HD",
                    "description": "HD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1280",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "720",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "HDPLUS",
                    "description": "HDPLUS resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1600",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "900",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "FHD",
                    "description": "FHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "1920",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "1080",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "QHD",
                    "description": "QHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "2560",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "1440",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "WQXGAPLUS",
                    "description": "WQXGAPLUS resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "3200",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "1800",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "UHD",
                    "description": "UHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "3840",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "2160",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "UHDPLUS",
                    "description": "UHDPLUS resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "5120",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "2880",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "FUHD",
                    "description": "FUHD resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "7680",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "4320",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "QUHD",
                    "description": "resolution.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "width",
                            "description": "15360",
                            "type": "Number"
                        },
                        {
                            "name": "height",
                            "description": "8640",
                            "type": "Number"
                        },
                        {
                            "name": "aspectRatio",
                            "description": "16:9",
                            "type": "String"
                        }
                    ]
                }
            ],
            "itemtype": "attribute",
            "name": "VIDEO_RESOLUTION",
            "type": "JSON",
            "readonly": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 189,
            "description": "The list of local media streams.",
            "itemtype": "attribute",
            "name": "_mediaStream",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 200,
            "description": "Stores the local MediaStream for screensharing.",
            "itemtype": "attribute",
            "name": "_mediaScreen",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 211,
            "description": "Stores the local MediaStream clone for audio screensharing.",
            "itemtype": "attribute",
            "name": "_mediaScreenClone",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 222,
            "description": "The user stream settings.",
            "itemtype": "attribute",
            "name": "_defaultStreamSettings",
            "type": "JSON",
            "params": [
                {
                    "name": "audio",
                    "description": "If user enables audio, this is the default setting.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "stereo",
                            "description": "Enabled stereo or not",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "video",
                    "description": "If user enables video, this is the default setting.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "resolution",
                            "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "frameRate",
                            "description": "Maximum frameRate of Video",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "bandwidth",
                    "description": "Bandwidth settings.",
                    "type": "String",
                    "props": [
                        {
                            "name": "audio",
                            "description": "Audio default Bandwidth",
                            "type": "String"
                        },
                        {
                            "name": "video",
                            "description": "Video default Bandwidth",
                            "type": "String"
                        },
                        {
                            "name": "data",
                            "description": "Data default Bandwidth.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.7",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 260,
            "description": "The user stream settings.",
            "itemtype": "attribute",
            "name": "_streamSettings",
            "type": "JSON",
            "params": [
                {
                    "name": "audio",
                    "description": "This call requires audio",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "stereo",
                            "description": "Enabled stereo or not",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "video",
                    "description": "This call requires video",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "resolution",
                            "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "frameRate",
                            "description": "Maximum frameRate of Video",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "screenshare",
                            "description": "The flag that indicates\n   if screensharing is enabled or not.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "bandwidth",
                    "description": "Bandwidth settings",
                    "type": "String",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "Audio Bandwidth",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "video",
                            "description": "Video Bandwidth",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "Data Bandwidth.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 284,
            "description": "The flag that indicates if screensharing is available.",
            "itemtype": "attribute",
            "name": "_screenSharingAvailable",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 296,
            "description": "The getUserMedia settings parsed from\n{{#crossLink \"Skylink/_streamSettings:attr\"}}_streamSettings{{/crossLink}}.",
            "itemtype": "attribute",
            "name": "_getUserMediaSettings",
            "type": "JSON",
            "params": [
                {
                    "name": "audio",
                    "description": "This call requires audio.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "video",
                    "description": "This call requires video.",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "mandatory.maxHeight",
                            "description": "Video maximum width.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "mandatory.maxWidth",
                            "description": "Video maximum height.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "mandatory.maxFrameRate",
                            "description": "Maximum frameRate of Video.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "optional",
                            "description": "The getUserMedia options.",
                            "type": "Array",
                            "optional": true,
                            "props": [
                                {
                                    "name": "0",
                                    "description": "The sourceId constraint settings.",
                                    "type": "JSON"
                                },
                                {
                                    "name": "0.sourceId",
                                    "description": "The sourceId of the video stream.",
                                    "type": "String"
                                }
                            ]
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 316,
            "description": "The user MediaStream(s) status.",
            "itemtype": "attribute",
            "name": "_mediaStreamsStatus",
            "type": "JSON",
            "params": [
                {
                    "name": "audioMuted",
                    "description": "Is user's audio muted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "videoMuted",
                    "description": "Is user's vide muted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 329,
            "description": "Fallback to audio call if audio and video is required.",
            "itemtype": "attribute",
            "name": "_audioFallback",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "required": 1,
            "component": "Stream",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 342,
            "description": "Access to user's MediaStream is successful.",
            "itemtype": "method",
            "name": "_onUserMediaSuccess",
            "params": [
                {
                    "name": "stream",
                    "description": "MediaStream object.",
                    "type": "MediaStream"
                },
                {
                    "name": "isScreenSharing",
                    "description": "The flag that indicates\n  if stream is a screensharing stream.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "mediaAccessSuccess",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.3.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 426,
            "description": "Access to user's MediaStream failed.",
            "itemtype": "method",
            "name": "_onUserMediaError",
            "params": [
                {
                    "name": "error",
                    "description": "Error object that was thrown.",
                    "type": "Object"
                },
                {
                    "name": "isScreenSharing",
                    "description": "The flag that indicates\n  if stream is a screensharing stream.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "mediaAccessError",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.4",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 461,
            "description": "The remote peer advertised streams, that we are forwarding to the app. This is part\nof the peerConnection's addRemoteDescription() API's callback.",
            "itemtype": "method",
            "name": "_onRemoteStreamAdded",
            "params": [
                {
                    "name": "targetMid",
                    "description": "PeerId of the peer that has remote stream to send.",
                    "type": "String"
                },
                {
                    "name": "event",
                    "description": "This is provided directly by the peerconnection API.",
                    "type": "Event"
                },
                {
                    "name": "isScreenSharing",
                    "description": "The flag that indicates\n  if stream is a screensharing stream.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "trigger": "incomingStream",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 508,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseAudioStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "This call requires audio",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "stereo",
                            "description": "Enabled stereo or not.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The parsed audio options.\n- settings: User set audio options\n- userMedia: getUserMedia options",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 542,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseAudioStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "This call requires video",
                    "type": "Boolean|JSON",
                    "optional": true,
                    "optdefault": "false",
                    "props": [
                        {
                            "name": "resolution",
                            "description": "[Rel: Skylink.VIDEO_RESOLUTION]",
                            "type": "JSON",
                            "optional": true,
                            "props": [
                                {
                                    "name": "width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "frameRate",
                            "description": "Maximum frameRate of Video",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "screenshare",
                            "description": "If screensharing should be enabled if available.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The parsed video options.\n- settings: User set video options\n- userMedia: getUserMedia options",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.8",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 619,
            "description": "Parse and set bandwidth settings.",
            "itemtype": "method",
            "name": "_parseBandwidthSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Bandwidth settings",
                    "type": "String",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "Audio Bandwidth",
                            "type": "String",
                            "optional": true,
                            "optdefault": "50"
                        },
                        {
                            "name": "video",
                            "description": "Video Bandwidth",
                            "type": "String",
                            "optional": true,
                            "optdefault": "256"
                        },
                        {
                            "name": "data",
                            "description": "Data Bandwidth",
                            "type": "String",
                            "optional": true,
                            "optdefault": "1638400"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 649,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseMutedSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "This call requires audio",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Enabled stereo or not.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "[Rel: VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "Maximum frameRate of video.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                }
            ],
            "return": {
                "description": "The parsed muted options.",
                "type": "JSON"
            },
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 684,
            "description": "Parse stream default settings",
            "itemtype": "method",
            "name": "_parseDefaultMediaStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Media default Constraints.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "maxWidth",
                            "description": "Video default width.",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "640"
                        },
                        {
                            "name": "maxHeight",
                            "description": "Video default height.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "480"
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.7",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 715,
            "description": "Parse stream settings",
            "itemtype": "method",
            "name": "_parseMediaStreamSettings",
            "params": [
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "This call requires audio",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Enabled stereo or not.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "[Rel: VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "Maximum frameRate of video.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "screenshare",
                                    "description": "If screensharing should be\n  enabled if available.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 764,
            "description": "Sends our Local MediaStreams to other Peers.\nBy default, it sends all it's other stream",
            "itemtype": "method",
            "name": "_addLocalMediaStreams",
            "params": [
                {
                    "name": "peerId",
                    "description": "The peerId of the peer to send local stream to.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 815,
            "description": "Stops current MediaStream playback and streaming.",
            "itemtype": "method",
            "name": "stopStream",
            "example": [
                "\n  SkylinkDemo.stopStream();"
            ],
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 836,
            "description": "Handles the muting of audio and video streams.",
            "itemtype": "method",
            "name": "_muteLocalMediaStreams",
            "return": {
                "description": "options.hasVideoTracks If MediaStream(s) has video tracks."
            },
            "access": "private",
            "tagname": "",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 940,
            "description": "Waits for MediaStream.\n- Once the stream is loaded, callback is called\n- If there's not a need for stream, callback is called",
            "itemtype": "method",
            "name": "_waitForLocalMediaStream",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback after requested constraints are loaded.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "The callback error that is defined\n  when there's an error.",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                },
                {
                    "name": "options",
                    "description": "Media Constraints.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "userData",
                            "description": "User custom data.",
                            "type": "JSON",
                            "optional": true
                        },
                        {
                            "name": "audio",
                            "description": "This call requires audio",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Enabled stereo or not",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "This call requires video",
                            "type": "Boolean|JSON",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "[Rel: VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "Video width",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "Video height",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "Maximum frameRate of Video",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "bandwidth",
                            "description": "Bandwidth settings",
                            "type": "String",
                            "optional": true,
                            "props": [
                                {
                                    "name": "audio",
                                    "description": "Audio Bandwidth",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "video",
                                    "description": "Video Bandwidth",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "data",
                                    "description": "Data Bandwidth",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                }
            ],
            "trigger": "mediaAccessRequired",
            "access": "private",
            "tagname": "",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1070,
            "description": "Gets the default video source and microphone source.\n- This is an implemented function for Skylink.\n- Constraints are not the same as the [MediaStreamConstraints](http://dev.w3.\n  org/2011/webrtc/editor/archives/20140817/getusermedia.html#dictionary\n  -mediastreamconstraints-members) specified in the w3c specs.\n- Calling <b>getUserMedia</b> while having streams being sent to another peer may\n  actually cause problems, because currently <b>getUserMedia</b> refreshes all streams.",
            "itemtype": "method",
            "name": "getUserMedia",
            "params": [
                {
                    "name": "options",
                    "description": "MediaStream constraints.",
                    "type": "JSON",
                    "optional": true,
                    "props": [
                        {
                            "name": "audio",
                            "description": "Option to allow audio stream.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "optdefault": "true",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If audio stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "Option to allow video stream.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "optdefault": "true",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream maximum frameRate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If video stream should be muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "screenshare",
                                    "description": "If screensharing should\n  be enabled for the\n  call if screensharing is available. If audio is enabled, two streams\n  will be received at the end.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after media was successfully accessed.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Default is to get both audio and video\n  // Example 1: Get both audio and video by default.\n  SkylinkDemo.getUserMedia();\n\n  // Example 2: Get the audio stream only\n  SkylinkDemo.getUserMedia({\n    'video' : false,\n    'audio' : true\n  });\n\n  // Example 3: Set the stream settings for the audio and video\n  SkylinkDemo.getUserMedia({\n    'video' : {\n       'resolution': SkylinkDemo.VIDEO_RESOLUTION.HD,\n       'frameRate': 50\n     },\n    'audio' : {\n      'stereo': true\n    }\n  });\n\n  // Example 4: Get user media with callback\n  SkylinkDemo.getUserMedia({\n    'video' : false,\n    'audio' : true\n  },function(error,success){\n     if (error){\n       console.log(error);\n     }\n     else{\n       console.log(success);\n    }\n  });"
            ],
            "trigger": "mediaAccessSuccess, mediaAccessError, streamEnded",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1207,
            "description": "Resends a Local MediaStreams. This overrides all previous MediaStreams sent.\nProvided MediaStream would be automatically detected as unmuted by default.",
            "itemtype": "method",
            "name": "sendStream",
            "params": [
                {
                    "name": "stream",
                    "description": "The stream object or options.",
                    "type": "Object|JSON",
                    "props": [
                        {
                            "name": "audio",
                            "description": "If send a new stream with audio.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "stereo",
                                    "description": "Option to enable stereo\n   during call.",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If send a new stream with audio muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        },
                        {
                            "name": "video",
                            "description": "Option to allow video stream.",
                            "type": "JSON|Boolean",
                            "optional": true,
                            "optdefault": "false",
                            "props": [
                                {
                                    "name": "resolution",
                                    "description": "The resolution of video stream.\n  [Rel: Skylink.VIDEO_RESOLUTION]",
                                    "type": "JSON",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.width",
                                    "description": "The video stream resolution width (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "resolution.height",
                                    "description": "The video stream resolution height (in px).",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "frameRate",
                                    "description": "The video stream maximum frameRate.",
                                    "type": "Number",
                                    "optional": true
                                },
                                {
                                    "name": "mute",
                                    "description": "If send a new stream with video muted.",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "The callback fired after stream was sent.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Send a stream object instead\n  SkylinkDemo.on('mediaAccessSuccess', function (stream) {\n    SkylinkDemo.sendStream(stream);\n  });\n\n  // Example 2: Send stream with getUserMedia automatically called for you\n  SkylinkDemo.sendStream({\n    audio: true,\n    video: false\n  });\n\n  // Example 3: Send stream with getUserMedia automatically called for you\n  // and audio is muted\n  SkylinkDemo.sendStream({\n    audio: { mute: true },\n    video: false\n  });\n\n  // Example 4: Send stream with callback\n  SkylinkDemo.sendStream({\n   audio: true,\n   video: true\n  },function(error,success){\n   if (error){\n     console.log('Error occurred. Stream was not sent: '+error)\n   }\n   else{\n     console.log('Stream successfully sent: '+success);\n   }\n  });"
            ],
            "trigger": "peerRestart, incomingStream",
            "component": "Stream",
            "since": "0.5.6",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1377,
            "description": "Mutes a Local MediaStreams.",
            "itemtype": "method",
            "name": "muteStream",
            "params": [
                {
                    "name": "options",
                    "description": "The muted options.",
                    "type": "Object|JSON",
                    "props": [
                        {
                            "name": "audioMuted",
                            "description": "If send a new stream with audio muted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "videoMuted",
                            "description": "If send a new stream with video muted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "example": [
                "\n  SkylinkDemo.muteStream({\n    audioMuted: true,\n    videoMuted: false\n  });"
            ],
            "trigger": "peerRestart, peerUpdated, incomingStream",
            "component": "Stream",
            "since": "0.5.7",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1468,
            "description": "Enable microphone.\n- Try to start the audio source.\n- If no audio source was initialy set, this function has no effect.\n- If you want to activate your audio but haven't initially enabled it you would need to\n  reinitiate your connection with\n  {{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}\n  process and set the audio parameter to true.",
            "itemtype": "method",
            "name": "enableAudio",
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "example": [
                "\n  SkylinkDemo.enableAudio();"
            ],
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1491,
            "description": "Disable microphone.\n- Try to disable the microphone.\n- If no microphone was initially set, this function has no effect.",
            "itemtype": "method",
            "name": "disableAudio",
            "example": [
                "\n  SkylinkDemo.disableAudio();"
            ],
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1510,
            "description": "Enable webcam video.\n- Try to start the video source.\n- If no video source was initialy set, this function has no effect.\n- If you want to activate your video but haven't initially enabled it you would need to\n  reinitiate your connection with\n  {{#crossLink \"Skylink/joinRoom:method\"}}joinRoom(){{/crossLink}}\n  process and set the video parameter to true.",
            "itemtype": "method",
            "name": "enableVideo",
            "example": [
                "\n  SkylinkDemo.enableVideo();"
            ],
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1533,
            "description": "Disable video source.\n- Try to disable the video source.\n- If no video source was initially set, this function has no effect.",
            "itemtype": "method",
            "name": "disableVideo",
            "example": [
                "\n  SkylinkDemo.disableVideo();"
            ],
            "trigger": "peerUpdated, peerRestart",
            "deprecated": true,
            "component": "Stream",
            "since": "0.5.5",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1552,
            "description": "Shares the current screen with users.\n- You will require our own Temasys Skylink extension to do screensharing.\n  Currently, opera does not support this feature.",
            "itemtype": "method",
            "name": "shareScreen",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback fired after media was successfully accessed.\n  Default signature: function(error object, success object)",
                    "type": "Function",
                    "optional": true
                }
            ],
            "example": [
                "\n  // Example 1: Share the screen\n  SkylinkDemo.shareScreen();\n\n  // Example 2: Share screen with callback when screen is ready and shared\n  SkylinkDemo.shareScreen(function(error,success){\n     if (error){\n       console.log(error);\n     }\n     else{\n       console.log(success);\n    }\n  });"
            ],
            "trigger": "mediaAccessSuccess, mediaAccessError, incomingStream",
            "component": "Stream",
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-media.js",
            "line": 1650,
            "description": "Stops screensharing MediaStream playback and streaming.",
            "itemtype": "method",
            "name": "stopScreen",
            "example": [
                "\n  SkylinkDemo.stopScreen();"
            ],
            "since": "0.6.0",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 1,
            "description": "Enables the stereo feature by modifying the SDP. This requires the OPUS\nto be enabled in the connection first.",
            "itemtype": "method",
            "name": "_addSDPStereo",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "Sdp received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated version with Stereo feature",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 61,
            "description": "Sets the video resolution by modifying the SDP.\n- This is broken.",
            "itemtype": "method",
            "name": "_setSDPVideoResolution",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "Sdp received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated version with custom Resolution settings",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 149,
            "description": "Set the audio, video and data streamming bandwidth by modifying the SDP.\nIt sets the bandwidth when the connection is good. In low bandwidth environment,\nthe bandwidth is managed by the browser.",
            "itemtype": "method",
            "name": "_setSDPBitrate",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "The session description received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated session description.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.10",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 213,
            "description": "Sets the audio codec for the connection,",
            "itemtype": "method",
            "name": "_setSDPVideoCodec",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "The session description received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated session description.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 269,
            "description": "Sets the audio codec for the connection,",
            "itemtype": "method",
            "name": "_setSDPAudioCodec",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "The session description received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated session description.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.2",
            "class": "Skylink"
        },
        {
            "file": "source/stream-sdp.js",
            "line": 324,
            "description": "Removes Firefox 32 H262 preference in the SDP to prevent breaking connection in\nunsupported browsers.",
            "itemtype": "method",
            "name": "_removeSDPFirefoxH264Pref",
            "params": [
                {
                    "name": "sdpLines",
                    "description": "The session description received.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Updated session description.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "component": "SDP",
            "since": "0.5.2",
            "class": "Skylink"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:47"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:61"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-channel.js:75"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:75"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-channel.js:252"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:252"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-channel.js:325"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-channel.js:325"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:16"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:32"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:51"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:77"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:103"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:127"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:166"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-process.js:207"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:13"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:29"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:63"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:79"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:98"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:136"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:151"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:178"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:193"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:221"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:236"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:289"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:312"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:520"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:592"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:592"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:660"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:660"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:800"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:800"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:830"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:880"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:880"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:967"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:967"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:1174"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:1174"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:1417"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:1738"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:1738"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:1755"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:1755"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:1840"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:1840"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:1853"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:1853"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:1939"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:1939"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/data-transfer.js:2032"
        },
        {
            "message": "unknown tag: component",
            "line": " source/data-transfer.js:2032"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:19"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:37"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/ice-candidate.js:61"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:61"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:114"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:136"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:149"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-candidate.js:164"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:43"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:69"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:83"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:96"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:117"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:131"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:147"
        },
        {
            "message": "unknown tag: component",
            "line": " source/ice-connection.js:192"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:26"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:44"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:57"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:70"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:96"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:160"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-connection.js:293"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:293"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:353"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:518"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-connection.js:662"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:13"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:29"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-data.js:41"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:41"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:90"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:120"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-data.js:135"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:35"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:58"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:144"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:174"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:231"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/peer-handshake.js:256"
        },
        {
            "message": "unknown tag: component",
            "line": " source/peer-handshake.js:256"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:18"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:51"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:63"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:74"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:74"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:342"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:342"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:406"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:406"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:498"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:498"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-connection.js:520"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-connection.js:520"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:86"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:105"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:118"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:131"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:146"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:157"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:173"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:184"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:196"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:209"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:221"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:234"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:247"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:258"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:269"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:290"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:364"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:364"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:437"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:437"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:511"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:511"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/room-init.js:557"
        },
        {
            "message": "unknown tag: component",
            "line": " source/room-init.js:557"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:1"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:26"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:26"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:40"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:40"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:53"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:53"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:67"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:67"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:81"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:81"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:96"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:96"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:111"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:111"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:124"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:124"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:151"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:151"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:169"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:169"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:195"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:206"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:222"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:234"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:247"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:247"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:324"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:324"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:341"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:341"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:365"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:365"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:389"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:389"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:413"
        },
        {
            "message": "unknown tag: scoped",
            "line": " source/skylink-debug.js:436"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:436"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:460"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-debug.js:487"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:13"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:33"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:44"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:54"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:65"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:81"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:98"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:111"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:124"
        },
        {
            "message": "unknown tag: iceconnectionstate",
            "line": " source/skylink-events.js:137"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:137"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:149"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:159"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:169"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:178"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:187"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:224"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:261"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:298"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:335"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:379"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:428"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:453"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:474"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:513"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:530"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:561"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:575"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:586"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:598"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:610"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:624"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:680"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:703"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:746"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:788"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:827"
        },
        {
            "message": "unknown tag: component",
            "line": " source/skylink-events.js:870"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:28"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:40"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:53"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:70"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:93"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:105"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:116"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:137"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:148"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:160"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:178"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:191"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:293"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-channel.js:454"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:454"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-channel.js:495"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:12"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:68"
        },
        {
            "message": "unknown tag: development",
            "line": " source/socket-message.js:87"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:87"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:100"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:115"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:136"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:215"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:215"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:249"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:249"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:275"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:275"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:296"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:296"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:319"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:319"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:346"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:346"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:379"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:379"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:398"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:398"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:427"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:427"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:455"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:455"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:498"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:498"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:599"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:599"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:713"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:713"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:848"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:848"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:897"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:972"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:972"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/socket-message.js:1034"
        },
        {
            "message": "unknown tag: component",
            "line": " source/socket-message.js:1034"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:23"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:47"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:59"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:72"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:189"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:200"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:211"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:222"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:260"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:284"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:296"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:316"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:329"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:342"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:342"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:426"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:426"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:461"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:461"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:508"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:542"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:619"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:649"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:684"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:715"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:764"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:940"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:940"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1070"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1070"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1207"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1207"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1377"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1377"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1468"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1468"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1491"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1491"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1510"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1510"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1533"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1533"
        },
        {
            "message": "unknown tag: trigger",
            "line": " source/stream-media.js:1552"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-media.js:1552"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:1"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:61"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:149"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:213"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:269"
        },
        {
            "message": "unknown tag: component",
            "line": " source/stream-sdp.js:324"
        },
        {
            "message": "Missing item type\n// resend if failed\nif (iceConnectionState === self.ICE_CONNECTION_STATE.FAILED) {\n  log.debug([targetMid, 'RTCIceConnectionState', null,\n    'Ice connection state failed. Re-negotiating connection']);\n  self._removePeer(targetMid);\n  self._sendChannelMessage({\n    type: self._SIG_MESSAGE_TYPE.WELCOME,\n    mid: self._user.sid,\n    rid: self._room.id,\n    agent: window.webrtcDetectedBrowser,\n    version: window.webrtcDetectedVersion,\n    userInfo: self.getPeerInfo(),\n    target: targetMid,\n    restartNego: true,\n    hsPriority: -1\n  });",
            "line": " source/peer-connection.js:470"
        },
        {
            "message": "Missing item type\nEvent fired when an ICE connection state has changed.",
            "line": " source/skylink-events.js:137"
        }
    ]
}