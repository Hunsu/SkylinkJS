/**
 * Handles the room connection.
 * @class Room
 * @for Skylink
 * @since 0.6.0
 */
function Room(name, listener) {
  'use strict';

  // Reference of instance
  var com = this;

  /**
   * The room name.
   * @attribute name
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.name = name;


  /**
   * The request path to the api server.
   * @attribute path
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.apiPath = null;

  /**
   * The room configuration settings received from server.
   * @attribute apiConfig
   * @param {String} id The room id.
   * @param {String} token The room token.
   * @param {String} key The room key.
   * @param {String} startDateTime The room start date timestamp (ISO format).
   * @param {Integer} duration The room duration.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.apiConfig = {};

  /**
   * The room api owner.
   * @attribute owner
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.owner = null;

  /**
   * The user set settings for the room.
   * @attribute credentials
   * @param {Integer} duration The room duration set by user.
   * @param {String} hash The hashed secret generated by user.
   * @param {String} startDateTime The room start date timestamp (ISO format) set by user.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.credentials = globals.credentials;

  /**
   * The user self connection information.
   * @attribute self
   * @param {String} id The user id for this room.
   * @param {String} token The user token for this room.
   * @param {String} timeStamp The date timestamp (ISO format) for this room.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.self = {};

  /**
   * The list of users connected to room.
   * @attribute users
   * @param {String} <userId> The user connected to room.
   * @param {Peer} <userId>.<peerId The peer connected.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.users = {};

  /**
   * The list of components connected to room.
   * - E.g. MCU, Recording
   * @attribute user
   * @param {User} [n=*] The user connected to room.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.components = {};

  /**
   * The room duration.
   * @attribute startDateTime
   * @type Socket
   * @required
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.socket = null;
  
  /**
   * The room readyState.
   * @attribute readyState
   * @type String
   * @required
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.readyState = 'new';

  /**
   * Starts the connection to the room.
   * @method join
   * @trigger peerJoined, mediaAccessRequired
   * @for Room
   * @since 0.6.0
   */
  com.join = function (options) {
    com.socket.connect();
  };

  /**
   * Stops the connection to the room.
   * @method leave
   * @trigger peerJoined, mediaAccessRequired
   * @for Room
   * @since 0.6.0
   */
  com.leave = function () {
    com.socket.disconnect();
  };
  
  /**
   * Locks the Room.
   * @method lock
   * @trigger peerJoined, mediaAccessRequired
   * @for Room
   * @since 0.6.0
   */
  com.lock = function (options) {
    com.socket.connect();
  };

  /**
   * Unlocks the Room.
   * @method unlock
   * @trigger peerJoined, mediaAccessRequired
   * @for Room
   * @since 0.6.0
   */
  com.unlock = function () {
    com.socket.disconnect();
  };
  
  /**
   * Handles the event when room succesfully disconnects.
   * @method onLeave
   * @for Room
   * @since 0.6.0
   */
  com.onLeave = function () {
    listener('room:disconnect', {
      name: com.name,
      userId: com.self.id
    });
  };
  
  /**
   * Handles the event when room succesfully connects.
   * @method onJoin
   * @for Room
   * @since 0.6.0
   */
  com.onJoin = function () {
    listener('room:connect', {
      name: com.name,
      userId: com.self.id
    });
  };
  
  /**
   * Handles the socket events.
   * @method handleSocketEvents
   * @for Room
   * @since 0.6.0
   */
  com.handleSocketEvents = function (event, data) {
    listener(event, data);
    
    if (event === 'socket:disconnect') {
      com.self.disconnect();
    }
    
    if (event === 'socket:connect') {
      Messaging.start(com);
    }
  };
  
  /**
   * Updates the user data.
   * @method updateUser
   * @for Room
   * @since 0.6.0
   */
  com.updateUser = function (data) {
    self.data = data;
  };
  
  

  // Start loading the room information
  var path = '/api/' + globals.apiKey + '/' + com.name;

  // Set credentials if there is
  if (com.credentials !== null) {
    path += com.credentials.startDateTime + '/' +
      com.credentials.duration + '?&cred=' + com.credentials.hash;
  }

  // Check if there is a other query parameters or not
  if (globals.region) {
    path += (path.indexOf('?&') > -1 ? '&' : '?&') + 'rg=' + globals.region;
  }

  // Start connection
  Request.load(path, function (status, content) {
    // Store the path information
    com.apiPath = path;

    // Room configuration settings from server
    com.apiConfig = {
      key: content.cid,
      id: content.room_key,
      token: content.roomCred,
      startDateTime: content.start,
      duration: content.len
    };

    // User configuration settings from server
    com.self = {
      userId: null,
      connectId: content.username,
      token: content.userCred,
      timeStamp: content.timeStamp,
      data: globals.userData,
      constraints: JSON.parse(content.pc_constraints)

    };

    // Signalling information
    com.socket = new Socket(content.ipSigserver, com.handleSocketEvents);
    
    Messaging.handle(com);
  });
}