/**
 * Handles the room connection.
 * @class Room
 * @constructor
 * @param {String} name The room name to connect to.
 * @param {Function} [listener] The listener function.
 * @for Skylink
 * @since 0.6.0
 */
function Room(name, listener) {
  'use strict';

  // Prevent undefined listener error
  listener = listener || function (event, data) {};

  // Reference of instance
  var com = this;

  /**
   * The room name.
   * @attribute name
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.name = name;

  /**
   * The room id.
   * @attribute id
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.id = null;

  /**
   * The room token.
   * @attribute token
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.token = null;

  /**
   * The room key.
   * @attribute key
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.key = null;

  /**
   * The room start date timestamp (ISO format) for persistent mode.
   * @attribute startDateTime
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.startDateTime = null;

  /**
   * The room duration for persistent mode.
   * @attribute duration
   * @type Integer
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.duration = null;

  /**
   * The request path to the api server.
   * @attribute apiPath
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.apiPath = null;

  /**
   * The room api owner.
   * @attribute owner
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.owner = null;

  /**
   * The user set settings for the room.
   * @attribute credentials
   * @param {Integer} duration The room duration set by user.
   * @param {String} hash The hashed secret generated by user.
   * @param {String} startDateTime The room start date timestamp (ISO format) set by user.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.credentials = globals.credentials;

  /**
   * The self user connection.
   * @attribute self
   * @type Self
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.self = null;

  /**
   * The list of users connected to room.
   * @attribute users
   * @param {User} (#userId) The user connected to room.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.users = {};

  /**
   * The list of components connected to room.
   * This could be <var>MCU</var> or <var>Recording</var> peers.
   * @attribute components
   * @param {Component} (#index) The component connected to room.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.components = {};

  /**
   * The room duration.
   * @attribute startDateTime
   * @type Socket
   * @required
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.socket = null;

  /**
   * The room TURN/STUN servers connection.
   * @attribute iceServers
   * @param {JSON} (#index) The ICE server.
   * @param {String} (#index).credential The ICE server credential (password).
   * @param {String} (#index).url The ICE server url. The current format
   *    for TURN servers is <code>turn:username@urlhost</code>. It may be
   *    required to parse it differently in
   *    <code>{ username: 'username', credential: 'xxx', url: 'turn:urlhost' }</code>
   *    format for unsupported browsers like firefox.
   * @type Array
   * @required
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.iceServers = [];

  /**
   * The flag that indicates if the self user has joined the room.
   * @attribute connected
   * @type Boolean
   * @required
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.connected = false;

  /**
   * The flag that indicates if the room is locked.
   * @attribute locked
   * @type Boolean
   * @required
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.locked = false;

  /**
   * Function to subscribe to when room object has loaded and is ready to use.
   * @method onstart
   * @eventhandler true
   * @for Room
   * @since 0.6.0
   */
  com.onstart = function () {};

  /**
   * Function to subscribe to when self has joined the room.
   * @method onjoin
   * @eventhandler true
   * @for Room
   * @since 0.6.0
   */
  com.onjoin = function () {};

  /**
   * Function to subscribe to when a user has joined the room.
   * @method onuserjoin
   * @eventhandler true
   * @for Room
   * @since 0.6.0
   */
  com.onuserjoin = function () {};

  /**
   * Function to subscribe to when self has been kicked out of room.
   * @method onkick
   * @eventhandler true
   * @for Room
   * @since 0.6.0
   */
  com.onkick = function () {};

  /**
   * Function to subscribe to when self is warned by server.
   * @method onwarn
   * @eventhandler true
   * @for Room
   * @since 0.6.0
   */
  com.onwarn = function () {};

  /**
   * Function to subscribe to when room has been locked.
   * @method onlock
   * @for Room
   * @since 0.6.0
   */
  com.onlock = function () {};

  /**
   * Function to subscribe to when room has been unlocked.
   * @method onunlock
   * @eventhandler true
   * @for Room
   * @since 0.6.0
   */
  com.onunlock = function () {};

  /**
   * Function to subscribe to when self has leave the room.
   * @method onleave
   * @eventhandler true
   * @for Room
   * @since 0.6.0
   */
  com.onleave = function () {};


  /**
   * The handler that manages all triggers or relaying events.
   * @method handler
   * @param {String} event The event name.
   * @param {JSON} data The response data.
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.handler = function (event, data) {
    RoomHandler(com, event, data, listener);
  };

  /**
   * Starts the connection to the room.
   * @method join
   * @param {Stream} stream The stream object to send. <mark>Stream</mark> object must
   *   be ready before sending. Look at <var>stream:start</var> event.
   *   Set as <code>null</code> for non-stream connection.
   * @param {JSON} [config] The configuration settings.
   * @param {JSON} [config.bandwidth] The bandwidth configuration for the connection.
   *    This does fixes the bandwidth but doesn't prevent alterations done by browser for smoother streaming.
   * @param {Integer} [config.bandwidth.audio] The audio banwidth configuration.
   * @param {Integer} [config.bandwidth.video] The video banwidth configuration.
   * @param {Integer} [config.bandwidth.data] The data banwidth configuration.
   * @param {JSON|String} [config.userData] The self user's custom data.
   * @for Room
   * @since 0.6.0
   */
  com.join = function (stream, config) {
    if (com.connected) {
      throw new Error('You are already connected to this room [' + com.name +']');
    }

    config = config || {};

    // Parse self configuration first
    com.self.bandwidth = StreamParser.parseBandwidthConfig(config.bandwidth);
    com.self.data = config.userData;

    // Add stream if stream is not empty
    if (typeof stream === 'object' ? stream instanceof Stream : false) {
      com.self.addStreamConnection(stream, 'main');
    }

    // Start socket connection
    com.socket.connect();
  };

  /**
   * Stops the connection to the room.
   * @method leave
   * @for Room
   * @since 0.6.0
   */
  com.leave = function () {
    com.socket.disconnect();
  };

  /**
   * Locks the room.
   * @method lock
   * @for Room
   * @since 0.6.0
   */
  com.lock = function () {
    com.socket.send({
      type: 'roomLockEvent',
      mid: com.self.id,
      rid: com.id,
      lock: true
    });

    com.handler('room:lock', {
      userId: com.self.id
    });
  };

  /**
   * Unlocks the room.
   * @method unlock
   * @for Room
   * @since 0.6.0
   */
  com.unlock = function () {
    com.socket.send({
      type: 'roomLockEvent',
      mid: com.self.id,
      rid: com.id,
      lock: false
    });

    com.handler('room:unlock', {
      userId: com.self.id
    });
  };

  /**
   * Sends a stream to users.
   * @method sendStream
   * @param {Stream} stream The stream object. <mark>Stream</mark> object must
   *   be ready before sending. Look at <var>stream:start</var> event.
   * @for Room
   * @since 0.6.0
   */
  com.sendStream = function (stream, targetUsers) {
    var peerId = fn.generateUID();
    var key;

    // Do a check of targetUsers to send
    com.self.addStreamConnection(stream, peerId);

    for (key in com.users) {
      if (com.users.hasOwnProperty(key)) {
        com.users[key].handler('message:enter', {
          type: 'enter',
          mid: com.self.id,
          rid: com.id,
          prid: peerId,
          stream: com.self.getStreamingInfo('main')
        });
      }
    }
  };


  // Start loading the room information
  var path = '/api/' + globals.apiKey + '/' + com.name;

  // Set credentials if there is
  if (com.credentials !== null) {
    path += com.credentials.startDateTime + '/' +
      com.credentials.duration + '?&cred=' + com.credentials.hash;
  }

  // Check if there is a other query parameters or not
  if (globals.region) {
    path += (path.indexOf('?&') > -1 ? '&' : '?&') + 'rg=' + globals.region;
  }

  // Start connection
  Request.load(path, function (status, content) {
    // Store the path information
    com.apiPath = path;

    // Room configuration settings from server
    com.key = content.cid;
    com.id = content.room_key;
    com.token = content.roomCred;
    com.startDateTime = content.start;
    com.duration = content.len;
    com.owner = content.apiOwner;

    // User configuration settings from server
    com.self = new Self({
      id: null,
      username: content.username,
      token: content.userCred,
      timeStamp: content.timeStamp,
      data: globals.userData
    });

    //com.constraints = JSON.parse(content.pc_constraints);

    // Signalling information
    com.socket = new Socket({
      server: content.ipSigserver,
      httpPortList: content.httpPortList,
      httpsPortList: content.httpsPortList

    }, com.handler);

    // Bind the message events handler
    MessageHandler(com, listener);

    listener('room:start', {});

  }, function (status, error) {
    com.handler('room:error', {
      error: error
    });
  });
}