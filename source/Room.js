/**
 * Handles the room connection.
 * @class Room
 * @for Skylink
 * @since 0.6.0
 */
function Room(name, listener) {
  'use strict';

  // Reference of instance
  var com = this;

  /**
   * The room name.
   * @attribute name
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.name = name;

  /**
   * The room id.
   * @attribute name
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.id = null;
  
  /**
   * The room token.
   * @attribute name
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.token = null;
  
  /**
   * The room key.
   * @attribute key
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.key = null;
  
  /**
   * The room start date timestamp (ISO format) for persistent mode.
   * @attribute startDateTime
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.startDateTime = null;
  
  /**
   * The room duration for persistent mode.
   * @attribute duration
   * @type Integer
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.duration = null;

  /**
   * The request path to the api server.
   * @attribute path
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.apiPath = null;

  /**
   * The room api owner.
   * @attribute owner
   * @type String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.owner = null;

  /**
   * The user set settings for the room.
   * @attribute credentials
   * @param {Integer} duration The room duration set by user.
   * @param {String} hash The hashed secret generated by user.
   * @param {String} startDateTime The room start date timestamp (ISO format) set by user.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.credentials = globals.credentials;

  /**
   * The self user connection.
   * @attribute self
   * @type Self
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.self = null;
  
  /**
   * The user self custom user data.
   * @attribute self
   * @type JSON|String
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.selfData = null;
  
  /**
   * The user self existing local stream connection.
   * @attribute stream
   * @param {Stream} <streamId> The stream connected to room.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.streams = {};

  /**
   * The list of users connected to room.
   * @attribute users
   * @param {User} <userId> The user connected to room.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.users = {};

  /**
   * The list of components connected to room.
   * - E.g. MCU, Recording
   * @attribute user
   * @param {User} [n=*] The user connected to room.
   * @type JSON
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.components = {};

  /**
   * The room duration.
   * @attribute startDateTime
   * @type Socket
   * @required
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.socket = null;
  
  /**
   * The room readyState.
   * @attribute readyState
   * @type Integer
   * @required
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.readyState = 0;
  
  /**
   * The room locked state.
   * @attribute locked
   * @type Boolean
   * @required
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.locked = false;

  /**
   * The handler that manages all triggers or relaying events.
   * @attribute handler
   * @type Function
   * @private
   * @for Room
   * @since 0.6.0
   */
  com.handler = function (event, data) {
    RoomHandler(com, event, data, listener);
  };

  
  /**
   * Function to subscribe to when room ready state has changed.
   * @method onreadystatechange
   * @for Room
   * @since 0.6.0
   */
  com.onreadystatechange = function () {};

  /**
   * Function to subscribe to when self has joined the room.
   * @method onjoin
   * @for Room
   * @since 0.6.0
   */
  com.onjoin = function () {};
  
  /**
   * Function to subscribe to when self has been kicked out of room.
   * @method onlock
   * @for Room
   * @since 0.6.0
   */
  com.onkick = function () {};
  
  /**
   * Function to subscribe to when self is warned by server.
   * @method onunlock
   * @for Room
   * @since 0.6.0
   */
  com.onwarn = function () {};

  /**
   * Function to subscribe to when room has been locked.
   * @method onlock
   * @for Room
   * @since 0.6.0
   */
  com.onlock = function () {};
  
  /**
   * Function to subscribe to when room has been unlocked.
   * @method onunlock
   * @for Room
   * @since 0.6.0
   */
  com.onunlock = function () {};
  
  /**
   * Function to subscribe to when self has leave the room.
   * @method onleave
   * @for Room
   * @since 0.6.0
   */
  com.onleave = function () {};


  /**
   * Starts the connection to the room.
   * @method join
   * @trigger peerJoined, mediaAccessRequired
   * @for Room
   * @since 0.6.0
   */
  com.join = function (stream) {
    // Get user info for socket messaging
    var userInfo;

    if (stream) {
      com.self.streams[stream.id] = stream;
      userInfo = com.getUserInfo();
      userInfo.settings = userInfo.settings[stream.id];
    
    } else {
      userInfo = com.getUserInfo();
      userInfo.settings = {};
    }
    // Remove reference
    delete userInfo.agent;

    // User is in the Room
    com.socket.when('inRoom', function (data) {
      
      
      com.onJoin();
    });
    
    // Peer has joined the Room
    com.socket.when('enter', function (data) {
      com.addUserPeer(data, stream);
      
      com.socket.send({
        type: 'welcome',
        mid: com.self.userId,
        rid: com.apiConfig.id,
        prid: data.prid,
        agent: window.webrtcDetectedBrowser,
        version: window.webrtcDetectedVersion,
        webRTCType: window.webrtcDetectedType,
        userInfo: com.getUserInfo(),
        target: data.mid,
        weight: com.users[data.mid][data.prid].weight
      });
    });
    
    // Peer handshaking
    com.socket.when('welcome', function (data) {
      if (data.prid === 'main') {
        com.addUserPeer(data, stream);
      } else {
        com.addUserPeer(data);
      }
    });

    com.socket.connect();
  };

  /**
   * Stops the connection to the room.
   * @method leave
   * @trigger peerJoined, mediaAccessRequired
   * @for Room
   * @since 0.6.0
   */
  com.leave = function () {
    com.socket.disconnect();
  };
  
  /**
   * Locks the Room.
   * @method lock
   * @for Room
   * @since 0.6.0
   */
  com.lock = function (options) {
    com.socket.send({
      type: 'roomLockEvent',
      mid: com.self.id,
      rid: com.id,
      lock: true
    });
    
    com.handler('trigger:lock');
  };

  /**
   * Unlocks the Room.
   * @method unlock
   * @for Room
   * @since 0.6.0
   */
  com.unlock = function () {
    com.socket.send({
      type: 'roomLockEvent',
      mid: com.self.id,
      rid: com.id,
      lock: false
    });
    
    com.handler('trigger:unlock');
  };
 
  /**
   * Handles the event when room succesfully disconnects.
   * @method onLeave
   * @for Room
   * @since 0.6.0
   */
  com.onLeave = function () {
    listener('room:disconnect', {
      name: com.name,
      userId: com.self.id
    });
  };

  /**
   * Handles the event when room succesfully connects.
   * @method onJoin
   * @for Room
   * @since 0.6.0
   */
  com.onJoin = function () {
    listener('room:connect', {
      name: com.name,
      userId: com.self.id
    });
  };

  /**
   * Adds a user to the room.
   * @method addUser
   * @param {JSON} data The user information.
   * @for Room
   * @since 0.6.0
   */
  com.addUser = function (data) {
    var doOffer = data.type === 'welcome';

    com.users[data.mid] = com.users[data.mid] || {};

    // Received duplicate
    if (fn.isSafe(function () { return !!com.users[data.mid][data.prid]; })) {
      if (data.type === 'welcome') {
        if (com.users[data.mid][data.prid].weight < data.weight) {
          doOffer = false;
        }
      }
    // Create since peer doesn't exists
    } else {
      var peer = new Peer({
        id: data.prid,
        userId: data.mid,
        data: data.userInfo.userData,
        agent: data.agent,
        dataChannel: globals.dataChannel,
        streamingConfig: {
          audio: fn.isSafe(function () { 
            data.userInfo.settings.audio 
          }),
          video: fn.isSafe(function () { 
            data.userInfo.settings.video 
          }),
          status: fn.isSafe(function () { 
            data.userInfo.settings.mediaStatus 
          })
        }
      }, function (event, edata) {
        listener(event, edata);
  
        if (event === 'peer:localdescription:success') {
          console.info(edata);
          
          com.socket.send({
            type: edata.sdp.type,
            sdp: edata.sdp,
            mid: com.self.userId,
            prid: data.prid,
            target: data.mid,
            rid: com.apiConfig.id
          });
        }
        
        if (event === 'peer:icecandidate') {
          com.socket.send({
            type: 'candidate',
            label: edata.candidate.sdpMLineIndex,
            id: edata.candidate.sdpMid,
            candidate: edata.candidate.candidate,
            mid: com.self.userId,
            prid: data.prid,
            target: data.mid,
            rid: com.apiConfig.id
          });
        }
      });

      com.users[data.mid][data.prid] = peer;

      peer.connect(stream);
    }
    
    if (doOffer) {
      peer.createOffer();
    }
  };

  
  
  /**
   * Sends another stream
   * @method updateUser
   * @for Room
   * @since 0.6.0
   */
  com.sendNewStream = function (stream, userId) {
    // Get user info for socket messaging
    var userInfo;
    var prid = fn.generateUID();

    if (stream) {
      com.self.streams[stream.id] = stream;
      userInfo = com.users[userId]['main'].getInfo();
      userInfo.settings = userInfo.settings[stream.id];
    
    } else {
      userInfo = com.users[userId]['main'].getInfo();
      userInfo.settings = {};
    }
    // Remove reference

    com.addUser({
      type: 'enter',
      mid: userId,
      rid: com.apiConfig.id,
      prid: prid,
      agent: userInfo.agent.name,
      version: userInfo.agent.version,
      webRTCType: userInfo.agent.webRTCType,
      userInfo: userInfo
    }, stream);

    room.socket.send({
      type: 'welcome',
      mid: com.self.userId,
      rid: com.apiConfig.id,
      prid: prid,
      agent: window.webrtcDetectedBrowser,
      version: window.webrtcDetectedVersion,
      webRTCType: window.webrtcDetectedType,
      userInfo: com.getUserInfo(),
      target: userId,
      weight: com.users[userId][prid].weight
    });
  };

  
  /**
   * Handles the self connection to the room.
   * @class Self
   * @for Skylink
   * @extend Room
   * @since 0.6.0
   */
  com.Self = function (config) {
    // Reference of instance
    var subcom = this;

    /**
     * The self user id.
     * @attribute name
     * @type String
     * @private
     * @for Self
     * @since 0.6.0
     */
    com.id = config.id;
    
    /**
     * The self user data.
     * @attribute data
     * @type String | JSON
     * @private
     * @for Self
     * @since 0.6.0
     */
    com.data = config.data;
    
    /**
     * The self user username.
     * @attribute username
     * @type String
     * @private
     * @for Self
     * @since 0.6.0
     */
    com.username = config.username;
    
    /**
     * The self user timestamp (ISO format).
     * @attribute timeStamp
     * @type String
     * @private
     * @for Self
     * @since 0.6.0
     */
    com.timeStamp = config.timeStamp;
    
    /**
     * The self user local stream connection.
     * @attribute stream
     * @param {Stream} <streamId> The stream connected to room.
     * @type JSON
     * @private
     * @for Self
     * @since 0.6.0
     */
    com.streams = {};

    
    /**
     * Function to subscribe to when self user custom user data is updated.
     * @method onupdate
     * @for Self
     * @since 0.6.0
     */
    com.onupdate = function () {};
    
    /**
     * Function to subscribe to when self has added a stream connection.
     * @method onaddstreamconnection
     * @for Self
     * @since 0.6.0
     */
    com.onaddstreamconnection = function () {};

    /**
     * Function to subscribe to when self has stopped a stream connection.
     * @method onaddstream
     * @for Self
     * @since 0.6.0
     */
    com.onremovestreamconnection = function () {};
    
    /**
     * Function to subscribe to when self has been disconnected from the room.
     * @method ondisconnect
     * @for Self
     * @since 0.6.0
     */
    com.ondisconnect = function () {};
    
  
    /**
     * Updates the self user data.
     * @method update
     * @for Self
     * @since 0.6.0
     */
    com.update = function (data) {
      subcom.data = data;
      
      com.socket.send({
        type: 'updateUserEvent',
        mid: subcom.id,
        rid: com.id,
        userData: subcom.data
      });
    };
    
    /**
     * Gets the self user info.
     * @method getInfo
     * @for Self
     * @since 0.6.0
     */
    com.getInfo = function () {
      return {
        userData: subcom.data,
        settings: (function () {
          var streaming = {};

          subcom.streams.forEach(function (value, key) {
            streaming[key] = {
              audio: value.config.audio,
              video: value.config.video,
              mediaStatus: value.config.status,
              bandwidth: {}
            }
          });

          return streaming;
        })(),
        agent: {
          name: window.webrtcDetectedBrowser,
          version: window.webrtcDetectedVersion,
          webRTCType: window.webrtcDetectedType
        }
      };
    };
  };


  // Start loading the room information
  var path = '/api/' + globals.apiKey + '/' + com.name;

  // Set credentials if there is
  if (com.credentials !== null) {
    path += com.credentials.startDateTime + '/' +
      com.credentials.duration + '?&cred=' + com.credentials.hash;
  }

  // Check if there is a other query parameters or not
  if (globals.region) {
    path += (path.indexOf('?&') > -1 ? '&' : '?&') + 'rg=' + globals.region;
  }

  // Start connection
  Request.load(path, function (status, content) {
    // Store the path information
    com.apiPath = path;

    // Room configuration settings from server
    com.apiConfig = {
      key: content.cid,
      id: content.room_key,
      token: content.roomCred,
      startDateTime: content.start,
      duration: content.len
    };
    
    com.owner = content.apiOwner;

    // User configuration settings from server
    com.self = new Self({
      id: null,
      username: content.username,
      token: content.userCred,
      timeStamp: content.timeStamp,
      data: globals.userData
    });
    
    constraints: JSON.parse(content.pc_constraints)

    // Signalling information
    com.socket = new Socket({
      server: content.ipSigserver,
      httpPortList: content.httpPortList,
      httpsPortList: content.httpsPortList

    }, com.handler);
    
    listener('room:start', {
      id: com.id,
      name: com.name
    });
  
  }, function (status, error) {
    com.handler('trigger:error', {
      error: error,
      state: -1
    });
  });
}