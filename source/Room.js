/**
 * Handles the room connection.
 * @class Room
 * @for Skylink
 * @since 0.6.0
 */
function Room (name, listener) {
	'use strict';

	// Reference of instance
	var com = this;

	/**
	 * The room name.
	 * @attribute name
	 * @type String
	 * @private
	 * @for Room
	 * @since 0.6.0
	 */
	com.name = name;


	/**
	 * The request path to the api server.
	 * @attribute path
	 * @type String
	 * @private
	 * @for Room
	 * @since 0.6.0
	 */
	com.apiPath = null;

	/**
	 * The room configuration settings received from server.
	 * @attribute apiConfig
	 * @param {String} id The room id.
	 * @param {String} token The room token.
	 * @param {String} key The room key.
	 * @param {String} startDateTime The room start date timestamp (ISO format).
	 * @param {Integer} duration The room duration.
	 * @type JSON
	 * @private
	 * @for Room
	 * @since 0.6.0
	 */
	com.apiConfig = {};

	/**
	 * The room api owner.
	 * @attribute owner
	 * @type String
	 * @private
	 * @for Room
	 * @since 0.6.0
	 */
	com.owner = null;

	/**
	 * The user set settings for the room.
	 * @attribute credentials
	 * @param {Integer} duration The room duration set by user.
	 * @param {String} hash The hashed secret generated by user.
	 * @param {String} startDateTime The room start date timestamp (ISO format) set by user.
	 * @type JSON
	 * @private
	 * @for Room
	 * @since 0.6.0
	 */
	com.credentials = globals.credentials;

	/**
	 * The user self connection information.
	 * @attribute self
	 * @param {String} id The user id for this room.
	 * @param {String} token The user token for this room.
	 * @param {String} timeStamp The date timestamp (ISO format) for this room.
	 * @type User
	 * @private
	 * @for Room
	 * @since 0.6.0
	 */
	com.self = null;

	/**
	 * The list of users connected to room.
	 * @attribute user
	 * @param {User} [n=*] The user connected to room.
	 * @type JSON
	 * @private
	 * @for Room
	 * @since 0.6.0
	 */
	com.users = {};

	/**
	 * The list of components connected to room.
   * - E.g. MCU, Recording
	 * @attribute user
	 * @param {User} [n=*] The user connected to room.
	 * @type JSON
	 * @private
	 * @for Room
	 * @since 0.6.0
	 */
	com.components = {};

	/**
	 * The room duration.
	 * @attribute startDateTime
	 * @type Socket
	 * @required
	 * @private
	 * @for Room
	 * @since 0.6.0
	 */
	com.socket = null;

	/**
	 * Starts the connection to the room.
	 * @method join
	 * @trigger peerJoined, mediaAccessRequired
	 * @for Room
	 * @since 0.6.0
	 */
	com.join = function (options, callback) {
		com.socket.when('inRoom', function (data) {
			com.self.connect(data.pc_config, function (userId, peerId) {
				listener('room:connect', {
					name: com.name,
					userId: userId
				});

				callback(userId, peerId);
			});
		});

		com.socket.connect(function () {
			com.socket.send({
        type: 'joinRoom',
        uid: com.self.connectId,
        cid: com.apiConfig.key,
        rid: com.apiConfig.id,
        userCred: com.self.token,
        timeStamp: com.self.timeStamp,
        apiOwner: com.owner,
        roomCred: com.apiConfig.token,
        start: com.apiConfig.startDateTime,
        len: com.apiConfig.duration
      });
		});
	};

	/**
	 * Stops the connection to the room.
	 * @method leave
	 * @trigger peerJoined, mediaAccessRequired
	 * @for Room
	 * @since 0.6.0
	 */
	com.leave = function (callback) {
		com.socket.disconnect(function () {
			com.self.disconnect(function () {
				for (var userId in com.users) {
					if (com.users.hasOwnProperty(userId)) {
						com.users[userId].disconnect(function () {
							if (Object.keys(com.users).length === 0) {
								listener('room:disconnect', {
									name: com.name,
									userId: com.self.id
								});

								callback(com.name, com.self.userId);
							}
						});
					}
				}
			});
		});
	};


	// Start loading the room information
	var path = '/api/' + globals.apiKey + '/' + com.name;

  // Set credentials if there is
  if (com.credentials !== null) {
    path += com.credentials.startDateTime + '/' +
    	com.credentials.duration + '?&cred=' + com.credentials.hash;
  }

  // Check if there is a other query parameters or not
  if (globals.region) {
    path += (path.indexOf('?&') > -1 ? '&' : '?&') + 'rg=' + globals.region;
  }

  // Start connection
  Request.load(path, function (status, content) {
  	// Store the path information
  	com.apiPath = path;

  	// Room configuration settings from server
  	com.apiConfig = {
  		key: content.cid,
  		id: content.room_key,
	    token: content.roomCred,
	    startDateTime: content.start,
	    duration: content.len
  	};

  	// User configuration settings from server
  	com.self = new User({
  		connectId: content.username,
    	token: content.userCred,
    	timeStamp: content.timeStamp,
    	data: globals.userData,
    	peerConstraints: JSON.parse(content.pc_constraints)

  	}, function (event, data) {
  		listener(event, data);
  	});

  	// Signalling information
  	com.socket = new Socket(content.ipSigserver, function (event, data) {
  		listener(event, data);
  	});
  });

}